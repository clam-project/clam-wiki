= CLAM Music Annotator ver 0.3.1 =

== Purpose ==

[[Image:Annotator-SplashScreen.png|thumb|Splash screen]]

The [http://clam.iua.upf.edu CLAM] Music Annotator is a GPL tool that can be used to visualize, check and
modify music information extracted from audio: low level features, note
segmentation, chords, structure... The tool is intended to be useful for
the music information retrieval research whenever you need to:

* Supervise and correct the results of automated audio feature extraction algorithms.
* Generate manually edited annotations of audio as training examples or ground truth for those algorithms.

== Features ==

[[Image:Annotator-Tonnetz-Keyspace.png|thumb|The keyspace and tonnetz views to visualize the automatic chord extraction]]

The CLAM Annotator is not tied to a fixed description scheme (the set of
attributes). You can define the working attribute set by providing an XML
description schema definition. Sample description schemes and an extraction
programs are provided with the Annotator but you could implement your own
one with different algorithms and attributes. Also tools are provided to
select and join attributes from the output of several description sources.

[[Image:Annotator-SizedSegments.png|thumb|Editing sized segments]]

Other key features are:
* Attribute types:
** Free text
** Enumeration
** Bounded float
** Bounded integer
** Float array
** Frame Division (Equidistant division)
** Segmentations (Sizeless, Gapless, Overlapless or Free)
** ... more to come
* Several time segmentations and frame divisions can be defined at once (notes, structural parts, bars, beats, different frame sizes...).
* Each segmentation or frame division have its own set of attributes to attach to their childs.
* Auralization for the segmentations (click on the beggining)
* Auralization for the low-level descriptor (magnitude to freq)
* Instant views:
** [http://members2.boo.net/~knuth/ Tonnetz] for PCP like (tones correlation) display
** [http://www.iua.upf.es/mtg/publicacions.php?did=337 Key Space] for major and minor chords correlation
** ... more to come

==First Steps with the Annotator==

This tutorial guides your first steps with the CLAM Music Annotator.
'''Use the ''What's this'' button [[image:AnnotatorIcon-WhatsThis.png]] 
or Shift-F1 to get additional help for any element on the user interface.'''

=== Using the provided Chord example ===

* Open [[image:Annotator-IconOpenProject.png]] the '''Chords.pro''' project from the Music Annotator examples. If your are running on Windows, get one level up and open '''Samples''' dir. 
* Go to the '''Song descriptors''' tab and select a song. Debaser's Wooden House, for example.

[[image:Annotator-SongLevel.png|400px|Songs level descriptors and the list of songs]]

* Go to the '''intra-song descriptors''' tab. Click the Play [[image:AnnotatorIcon-Play.png]] button and you should see the animated key-space and tonnetz views flashing.

[[image:Annotator-Tonnetz-Keyspace.png|400px|Songs level descriptors and the list of songs]]
* How to interpret those views
** The upper one displays some numbers extracted along the chords for each instant. Not that interesting if you are not developing an extractor.
** The second view is the one with the detected chord segments. You probably need to zoom in to be useful. When you click a segment it is highlighted and the attributes for the segment (chord root and chord mode) are shown on the right. You can click follow-play button [[image:AnnotatorIcon-FollowPlay.png]] to change the selected segment with the playback.
**[[image:Annotator-CurrentSegmentProperties.png]]
** The Tonnetz view is the one with the hexagons. Hexagons represent sounding pitches, they are arranged in such a way that  common chords modes draw identificable shapes, for example the pointing down triangle on the previous screenshot is the figure for a minor chord. The one on the screenshot bellow is less clear but the main hexagons are C and G and, because Eb is not lighten but E is, it is probably a C major (a triangle pointing up). Use the context help to see a list of common shapes.
**[[image:Annotator-TonnetzDetail.png]]
** The KeySpace view is the one at the bottom. It displays the instant tonality which matches with major and minor chords. Chords sharing pitches are arranged closer so the stronger one can be identified better by contrast. Note that this view only displays major and minor chords.
**[[image:Annotator-KeySpaceDetail.png]]

=== Analyzing the chords for our own songs ===

So you want to analyze your own song.

* For this task you can use the Chords project example.
* Go to the '''song descriptors''' tab and do: '''Project, Add Song to Project''' [[image:AnnotatorIcon-AddSong.png]].
* Select the new song, ignore the error message and click '''Song, Compute Descriptors''' [[image:AnnotatorIcon-ComputeDescription.png]]
* Wait until the execution ends and then click '''Song, Reload Descriptors'''  [[image:AnnotatorIcon-ReloadDescription.png]]
* Once reloaded, proceed as before.

=== Building a project from scratch ===

Before creating a new Project let's take a look how the previous project was defined.

* Open the previous project
* Click the '''Project Properties''' button [[image:Annotator-IconProjectProperties.png]].
* A dialog will appear with the basic parameters for the project
* [[Image:Annotator-DetailProjectProperties.png|400px]]
* Lets review the parameters
** The ''project file'' is the file that contains those parameters, the list of songs and the view configuration.
** The ''description schema'' is a file that describes which are the working attributes in your project. You can build it by hand or you can use the extractor to generate it (see below).
** The ''description file extension'' is the suffix that will be appended to the song file name to obtain the description file name. Descriptions will be stored in a file that is on the same folder that the song file it they have a file name resulting of appending such a suffix.
** The ''extractor command'' is the command used to extract the chords. This project has the <tt>ChordExtractor</tt> command which is one of the extractors that come with the program. 
*** Remember that every extractor has its own schema.
*** Given an extractor you can use a command line option to generate a description scheme file conforming its output such as: <tt>MyExtractor -s MySchema.sc</tt>
*** You may not provide an extractor and just edit the descriptors yourself by hand
** You can additionally add some ''project documentation'' in html that will be shown when you open the project. This has use for annotation purposes to write on the annotation criteria.

Examples projects may be placed on system folders not writeable by normal users.
Thus, by creating our own one, we could save the modifications and the like.
So, now that we know which are the project parameters, let's define our own one.

* Click the '''New Project''' button [[image:Annotator-IconNewProject.png]].
* Choose a proper location and name for the project file. 
* After that, the previous dialog will appear with the default values.
* Change the extractor to be <tt>ChordExtractor<tt> and the description file suffix <tt>.chords</tt>.
* Once you have defined all that, you can add songs to your project and compute them

=== Understanding the description schema ===

Let's take a closer look to what the description scheme defines.
You can acces the Schema Browser by selecting the Schema Browser tab, 
or by clicking the '''Browse Schema''' button [[Image:Annotator-IconBrowseSchema.png]].

[[Image:Annotator-SchemaBrowser.png|400px]]

=== Adding views to the project ===

But, in contrast to the example project,
the project we built from scratch has no Tonnetz neither KeySpace views.
To add them we should use the '''View/Add Instant View''' menu.
After selecting a kind of view, 
you should choose an attribute in the schema to apply it to.
Only attributes that support this kind of view appear.


=== Using a different extractor ===

* Choose a different extractor, for example the provided one: <tt>ClamExtractorExample</tt>
* Choose also different descriptor files suffix. Be carefull to choose a different one in order not to overwrite descriptions generated by other extractors, which you may want to keep.
* Once you have defined all that, you can add songs to your project and compute them
* This other extractor extracts four groups of descriptors 
** ID3 descriptors that you can see at the Song Description tab.
** Low level descriptors which are
