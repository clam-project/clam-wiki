We are currently generating Windows binaries crosscompiling from Linux.
In [[Devel/Windows MinGW cross compile]] we give a detailed procedure
that could give some clues if you want to natively compile in Windows
using MinGW.

http://ovh.dl.sourceforge.net/sourceforge/dev-cpp/devcpp-4.9.9.2_setup.exe

----

Warning: the instructions below are not complete, so You will not be able to complete the job.

'''Setup a MinGW/MSYS environment to build CLAM on Windows 2000/XP.'''

In order to compile CLAM framework on Windows, You will need [http://www.scons.org/ scons].
Scons is a python script that help developers to build their project. So You will need [http://www.python.org/ Python] too. Windows's Python implementation has a limitation on the length of the command line it can execute, so, in order to remove this limitation You will need also [https://sourceforge.net/projects/pywin32/ pywin32].

Once that Python, pywin32 and scons are installed on Your system, You're ready to install [http://www.mingw.org/ MSYS] and [http://www.mingw.org/ MinGW]. MSYS is a minimal Unix-like environment for Windows and can (not too much) easily be replaced by any other similar tool. MinGW is a gcc based compiler and a set of utilities able to build pure Windows binaries. MSYS/MinGW distribution is mainly packaged in tar.gz form. They have also some installers, but they are a bit outdated, so it is better to install .tar.gz packages by hand. All MSYS and MinGW files can be retrieved from [http://sf.net/project/showfiles.php?group_id=2435 this page].

A good choice to extract packages is [http://www.7-zip.org 7-zip] a powerful opensource file archiver.

'''First we need to install the MSYS environment.''' Install first the ''MSYS Base System''. I prefer 1.0.11 version, since it has more updated tools. You will need almost all non source packages, so it's better to download them all. You need to extract first msysCORE and MSYS. These are needed to have a very minimal shell.
Once extracted, start msys.bat and continue to extract packages from this shell. This is a required since the only tool I've found that is able to extract correctly these packages is MSYS tar (With other tools You will have a lot of empty file). You may need to extract some packages with an external archiver, such as the one containing updated packages for tar, bzip2, bash: You're still using Windows, so You will not be able to replace a file/program in use.

To extract packages with tar, issue one of these command:

''tar jxvf foo.tar.bz2''

or

''tar zxvf foo.tar.gz''

You need the first to extract bzipped tar files, You need the other to extract gzipped tar files.


Be careful to extract the packages in a location that doesn't contain spaces (i.e.: '''NOT''' inside ''C:\Documents and Settings\User\MinGW\''.) or the msys.bat and a lot of other tools later, will not work. I Usually choose something like ''C:\Programs\GNU\msys\'' as installation base dierectory for MSYS/MinGW.

Once the ''MSYS Base System'' is installed You need to install the packages inside ''MSYS Supplementary Tools'' too. Once again You will need almost all non source packages, so it's better to download them all. Install them from the MSYS shell.

Once all the packages are extracted You will find a lot of directory in the MSYS installation. Some package will extract in their own directory, so You need to manually move their content (usually bin/, man/, info/ etc.) outside that directory. On most Unix-like system documentation goes inside the share directory, so I usually move man/, info/ and doc/ inside share/, after the package extraction.

'''Configure the MSYS environment.'''
On a Unix-like system, configuration goes into files inside /etc/. The main configuration for MSYS is handled by ''/etc/fstab'' and ''/etc/profile''. In the first file You can specify mount points. In the other You can specify options common to all users.

''/etc/fstab'':
if You are not used with mount points You can think a mount point like a link to a directory in Your system. This is misleading, but may help You to make an idea of what You are trying to setup. Once You start MSYS shell, it put Yourself in Your MSYS home: ''/home/username/''. This directory is located inside the home/ directory in the MSYS installation directory. You can instruct MSYS to put /home/ somewhere else. I usually like to make MSYS homes and Windows home to coincide, 'cause I want great integration of all the tools, so I usually put a line in fstab like this

F:/DOCUME~1/       /home/

Where I've used the short name of ''Document and Settings'' 'cause I cannot use space in fstab.
Other directories You may want to put outside MSYS installation directory is /mingw, but I usually '''create MinGW''' directory just there. You will need this directory, so create it and edit fstab as needed (if needed).

''/etc/profile'':
Here You can define ENVIRONMENT variables, command alias and other useful things.
The PATH variable is inherited by the user Windows PATH, so I often choose to put some programs in Windows PATH, instead of MSYS PATH. The main example is for '''Python''' and '''scons'''. Where You will need to add ''F:\Programmi\Python25'' and ''F:\Programmi\Python25\Scripts'' to it. I will suggest You to do so, but if You don't like this idea, You can add a line like this to the end of /etc/profile:

PATH=$PATH:/f/Programmi/Python25:/f/Programmi/Python25/Scripts

and the results will be quite the same.
Later You will need '''pkg-config''', a tool that helps compiling programs. pkg-config usually stores its configuration files inside ''/usr/lib/pkgconfig'', but with MSYS/MinGW, You usually want that it will read them from ''/mingw/lib/pkgconfig''. You can obtain this by setting this environment variable in the /etc/profile:

PKG_CONFIG_PATH=/mingw/lib/pkgconfig

'''Installing MinGW.'''
To install MinGW You simply need to extract the packages You want inside mingw/ directory
(The one that You have created while configuring MSYS).

You will need at least the following packages:
''GNU Binutils'',
''MinGW API for MS-Windows'',
''MinGW Runtime'',
''GCC''.
I'm used to install latest available package for everything except GCC where I usually
install gcc 3.4.5.

-----

'''Obtaining CLAM dependencies.'''

The CLAM framework on a lot of libraries (directly or not). Here we are going to setup an
environment that will permit CLAM compilation. This is not exactly the same environment that
is described in [[Devel/Windows MinGW cross compile]], so, if You have special needs, You will find useful information there.

'''Install pkg-config, gettext, glib.''' One of the main tools not included in MSYS/MinGW distribution is pkg-config. This tool is largely used by many big projects like <a href="http://www.gnome.org/">http://www.gnome.org/</a>.
One of the most used libraries from Gnome that works on Windows is <a href="http://www.gtk.org/">http://www.gtk.org/</a>. The ''official'' Windows page for Gtk is <a href="http://www.gimp.org/~tml/gimp/win32/">http://www.gimp.org/~tml/gimp/win32/</a>. Here You will find precompiled packages for ''pkg-config'', ''gettext'' and ''glib'', as a lot of other useful tools. You can extract them directly in /mingw directory. I'm used to install Gtk and all its dependencies as I need them for other projects. These are not required to build CLAM.

'''Learn the basic of compiling with MinGW.'''
Most of the libraries we will need to compile is packaged by autoconf.
When a tool is packaged with autoconf, usually its source are in compressed
tar form. And its filename is something like ''package_name-version_numbers.tar.gz''.
When You extract the archive a ''package_name-version_numbers'' directory will be
created. In that directory You will find a ''configure'' script, that will help
You to give informations in order to setup compilation and installation steps.

There are two way to give information to configure script: ENVIRONMENT variables and
arguments. The command ''./configure --help'' will give You some hints about what
variables and what arguments You can set to obtain what You need.

The main configure's option is ''--prefix'' which permits to set the base of the
installation. Its default is ''/usr/local/'' and You can leave as it is, but if You
intend to build a binary MinGW package You usually want to set it to ''/mingw''

Building C/C++ programs You will always have CFLAGS, CXXFLAGS, CC, CXX variables that
You can change to pass preprocessor flags and compilers' names, if needed.

Usually CFLAGS and CXXFLAGS will use the same values. Usually on MinGW You want to have
some sort of compatibility with MSVC C-libraries, so that You can use them with both
the compilers: to achieve this You need to provide ''-mms-bitfields'' to the compiler. 

In a Bourne Shell (the one that You're using when You launch MSYS) You can pass
ENVIRONMENT variables to a specific program, without setting them system-wide, by
setting them on the same line where You call the program.

So on MinGW, in general, You will be able to compile a program or a library by
issuing these commands:

''tar zxvf package_name-version_numbers.tar.gz''

''cd package_name-version_numbers/''

''CFLAGS=-mms-bitfields CXXFLAGS=$CFLAGS ./configure --prefix=/mingw''

''make''

You will be able to install it by giving the command

''make install''

You will be able to package it with

''DESTDIR=$(pwd)/packaging/ make install''

''cd packaging/mingw/''

''tar zcvf package_name-version_numbers-bin.tar.gz *''

'''Install pthreads and glut.'''
You can find precompiled packages for these libraries suitable of use with Mingw at
<a href="http://sources.redhat.com/pthreads-win32/">http://sources.redhat.com/pthreads-win32/</a>
and
<a href="http://www.xmission.com/~nate/glut.html">http://www.xmission.com/~nate/glut.html</a>.
I don't know if glut is needed by any CLAM project, but I need it for other reason.
Note that is not required that You install pthread now, because in general it's not
needed by CLAM's dependencies. A lot of them will use it, anyway, if You install now.
The main drawback of it is that Your builds will depends on pthread.

These binary packages are not ready to install in MinGW directory. You should excract them
somewhere, create directories (mainly ''include/'', ''lib/'' and ''bin/'') and put all the
files in the right location. If You have any doubt, check the content of ''/mingw/'' directories to make an idea of what it should contain.


'''Install libxml, sigc++, glibmm and libxml++-2.6.''' CLAM largely depends on an XML parser. You can choose between libxml++-2.6 or xerces-c. I prefer libxml++-2.6 (which is part of the Gnome project) because I manage projects which depends on libxml and because it works without any tweak in my environment. If You want to use xerces-c refers to [[Devel/Windows MinGW cross compile]]. You can get these packages, in source form, from:
<a href="http://xmlsoft.org/">http://xmlsoft.org/</a>,
<a href="http://libsigc.sourceforge.net/stable.shtml">http://libsigc.sourceforge.net/stable.shtml</a>,
<a href="http://www.gtkmm.org/">http://www.gtkmm.org/</a>,
<a href=""></a>
