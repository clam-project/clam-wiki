== What is Faust? ==
FAUST (Functional AUdio STream) is a compiled language for real-time audio signal processing. It allows to easily describe a DSP flow with a algebraic type syntax<sup>[1]</sup> and generate an optimized fast code to compile to different platforms.

=== What Faust can do? ===
With Faust you can design and implement easily DSP audio algorithms and compile it for several environments (Pd, LADSPA, SuperCollider, etc). Plus, you can export the design to visualize it internal diagram functional blocks (with browseables SVGs) and to analyze its response exporting to Octave.

=== What is the actual support of Faust in CLAM? ===
CLAM in Linux is can load LADSPA plugins as processings inside its networks, so every FAUST compiled LADSPA plugin will be able to be loaded and used whithin a CLAM network.
The development version of NetworkEditor allows to compile and import the plugins and its block diagrams, and also edit the faust code with an external editor.

== How? ==
=== LADSPA support in CLAM ===
First you have to check that CLAM was compiled with LADSPA support.
To compile it, you will need the LADSPA API (ladspa dependency on Debian, alsa-devel on RH/Fedora). The SConstruct configuration parameter for compile CLAM with LADSPA support is 'with_ladspa=yes'. If you compile CLAM under linux without crosscompiling, is enabled by default.

=== FAUST ===
You need Faust installed on your system. You can search for a Faust package for your GNU/Linux distribution (at the moment the CLAM Faust support is limited to LADSPA plugins), or download the sources and compile by yourself (http://sourceforge.net/projects/faudiostream/). In any case, you need the compiler binary 'faust' and the library file 'ladspa.cpp' on system paths (usually one is on '/usr/bin' and the other on '/usr/lib/faust').

==== Preparing and defining a writable location for faust compilation ====
CLAM will search for the Faust 'examples' directory on the user home '.faust' dir (i.e.: '~/.faust/examples'), or 'FAUST_PATH' environment variable path ('$FAUST_PATH/examples'), to grant write permissions when running the makefiles. So, you can copy the examples directory of Faust (usually '/usr/share/doc/faust/examples'), or directly from the sources package.
If you want to add new faust plugins, just copy the .dsp source files in this user 'examples' directory.

* '''Option 1: using 'FAUST_PATH' environment variable'''
:For instance, imagine you have the examples directory on the '~/src/faust-0.9.9.4'. You need to define the FAUST_PATH environment var:

:<pre>
:$ export FAUST_PATH=~/src/faust-0.9.9.4
</pre>

:If you don't want to have to define it everytime you run a session you can add it on your default shell init script -for instance, "~/.bashrc"- or make a script which says "export FAUST_PATH=~/src/faust-0.9.9.4; NetworkEditor" (with faust installed in "~/src/faust-0.9.9.4")

* '''Option 2: linking '~/.faust''''
:If you have the faust 'examples' dir on your "~/.faust" dir you don't have to define 'FAUST_PATH'. So, if you have the Faust examples directory on a writable path, you could make just a simbolic link once. For instance, having '~/src/faust-0.9.9.4/examples':

:<pre>
:$ mkdir ~/.faust
:$ ln -s ~/src/faust-0.9.9.4/examples ~/.faust/examples
</pre>

That's it!

=== Using Faust from NetworkEditor ===
[[Image:Reload_Faust_Modules_Menu_Item.png|thumb|Reloading and recompiling FAUST Plugins from the Network Editor main menu]]


Execute the NetworkEditor. If you already compiled the ladspa plugins within the examples directory, you will see them on the FAUST Category of the [[:Image:Processing_Tree_Toolbox_With_Faust.png|processing tree toolbox]].

If you don't have compiled the plugins you can do it within NE. From the main menu you have to run "Reload FAUST modules" from the "Interface" menu item.


It will appear some warning messages. First [[:Image:FaustCompileFirstWarningMessage.png|one letting you that is an experimental support]].

Then [[:Image:Faust_compilation_AreYouSure.png|other will remind you that the compilation could take some minutes]] (in which -for now- the program will seems frozed), and ask if you want to continue.

If all works good, after the compilation you will be able to see the FAUST category inside the [[:Image:Processing_Tree_Toolbox_With_Faust.png|processings Tool Box Tree]].

You can use any compiled faust plugin as every other clam processing:
[[Image:Faust Plugin On Canvas.png]]

You can see that the processing box widget include the faust block diagram <sup>[2]</sup>

The Faust compiled plugins will have new functions from the processing box context menu:

[[Image:Faust_Processing_Box_Context_Menu.png]]
<gallery>
Image:Open_SVG_Diagram_with_Konqueror.png|Open diagram with browser (Konqueror)
Image:Open_DSP_Source_with_Kate.png|Open source with editor (Kate<sup>[3]</sup>)
</gallery>

== References and notes ==
<sup>[1]</sup> Orlarey, Y., Fober, D., & Letz, S. (2002). ''An algebraic approach to block diagram constructions''. Paper presented at Actes des Journ√©es d'Informatique Musicale, Marseille - GMEM. 

Orlarey, Y., Fober, D., & Letz, S. (2002). ''An algebra for block diagram languages''. Paper presented at International Computer Music Conference. 

Orlarey, Y., Fober, D., & Letz, S. (2004). ''Syntactical and semantical aspects of faust''. Paper presented at Soft Computing, Lyon, France.


<sup>[2]</sup> At this moment, the default size of the generated processings boxes with the embedded svg diagrams on the canvas depends of the number of ports and controls inlets/outlets. To open with a normalized size it could to be changed some resizing and zoom routines, and define how to decide the minimum default size of the diagram (some are really bigs!).

<sup>[3]</sup> Tip: In screenshot of Kate is used the syntax-highlighting included in Faust package.
