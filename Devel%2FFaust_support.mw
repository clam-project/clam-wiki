== What is Faust? ==
FAUST (Functional AUdio STream) is a compiled language for real-time audio signal processing. It allows to easily describe a DSP flow with a algebraic type syntax<sup>[1]</sup> and generate an optimized fast code to compile to different platforms.

=== What Faust can do? ===
With Faust you can design and implement easily DSP audio algorithms and compile it for several environments (Pd, LADSPA, SuperCollider, etc). Plus, you can export the design to visualize it internal diagram functional blocks (with browseables SVGs) and to analyze its response exporting to Octave.

=== What is the actual support of Faust in CLAM? ===
CLAM in Linux is can load LADSPA plugins as processings inside its networks, so every FAUST compiled LADSPA plugin will be able to be loaded and used whithin a CLAM network.
The development version of NetworkEditor allows to compile and import the plugins and its block diagrams, and also edit the faust code with an external editor.

== How? ==
=== LADSPA support in CLAM ===
First you have to check that CLAM was compiled with LADSPA support.
To compile it, you will need the LADSPA API (ladspa dependency on Debian, alsa-devel on RH/Fedora). The SConstruct configuration parameter for compile CLAM with LADSPA support is 'with_ladspa=yes'. If you compile CLAM under linux without crosscompiling, is enabled by default.

=== FAUST ===
You need the Faust compiler binary and libraries. You may install some distribution package, or compile yourself. To compile Faust for yourself you can use any directory you want, and define the environment variable "FAUST_PATH" pointing to the root of that local Faust copy. CLAM will search the Faust source code files (*.dsp) on "$FAUST_PATH/examples" or if it doesn't exist it will use "$HOME/.faust/examples". The LADSPA compiled plugins will be on "examples/ladspadir" and the SVG diagrams on individual directories within "examples".

For instance: you download the last Faust tar.gzipped source code (http://downloads.sourceforge.net/faudiostream/faust-0.9.9.4b.tar.gz?modtime=1206634618&big_mirror=0). 

You copy it to "$HOME/src" (or wherever you want) and you uncompress the package:
<pre>	~/src$ tar xvzf ./faust-0.9.9.4b.tar.gz</pre>

That would generate a "faust-0.9.9.4" directory. From there you need to execute "make". If all goes right, you will see faust binary on "compile" subdirectory.
You will have to be sure that the "examples" subdirectory exists (and have the .dsp examples), and the user haves write permissions on it.
Define the FAUST_PATH environment var as your faust local sandbox (if you have it on "$HOME/.faust" this is not needed):

<pre>	$ export FAUST_PATH=~/src/faust-0.9.9.4</pre>

(if you don't want to have to define it everytime you run a session you can add it on your default shell init script -for instance, "~/.bashrc"- or make a script which says "export FAUST_PATH=~/src/faust-0.9.9.4; NetworkEditor" -with faust installed in "$HOME/src/faust-0.9.9.4"-)

That's it!

[[Image:Reload_Faust_Modules_Menu_Item.png|thumb|Reloading and recompiling FAUST Plugins from the Network Editor main menu]]
=== Using Faust from NetworkEditor ===
Execute the NetworkEditor. If you already compiled the ladspa plugins within the examples directory, you will see them on the FAUST Category of the [[:Image:Processing_Tree_Toolbox_With_Faust.png|processing tree toolbox]].

If you don't have compiled the plugins you can do it within NE. From the main menu you have to run "Reload FAUST modules" from the "Interface" menu item.


It will appear some warning messages. First one will let you that is an experimental support: [[:Image:FaustCompileFirstWarningMessage.png]]

Then other will remind you that the compilation could take some minutes (in which -for now- the program will seems frozed), and ask if you want to continue [[:Image:Faust_compilation_AreYouSure.png]]

If all works good, after the compilation you will be able to see the FAUST category inside the [[:Image:Processing_Tree_Toolbox_With_Faust.png|processings Tool Box Tree]].

You can use any compiled faust plugin as every other clam processing:
[[Image:Faust Plugin On Canvas.png]]

You can see that the processing box widget include the faust block diagram <sup>[2]</sup>

The Faust compiled plugins will have new functions from the processing box context menu:

[[Image:Faust_Processing_Box_Context_Menu.png]]

Open diagram with browser (Konqueror):
[[Image:Open_SVG_Diagram_with_Konqueror.png]]

Open source with editor (Kate<sup>[3]</sup>):
[[Image:Open_DSP_Source_with_Kate.png]]

== References and notes ==
<sup>[1]</sup> Orlarey, Y., Fober, D., & Letz, S. (2002). ''An algebraic approach to block diagram constructions''. Paper presented at Actes des Journ√©es d'Informatique Musicale, Marseille - GMEM. 

Orlarey, Y., Fober, D., & Letz, S. (2002). ''An algebra for block diagram languages''. Paper presented at International Computer Music Conference. 

Orlarey, Y., Fober, D., & Letz, S. (2004). ''Syntactical and semantical aspects of faust''. Paper presented at Soft Computing, Lyon, France.
