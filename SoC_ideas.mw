= How to apply =
'''Please see general information about how to apply here: [[GSoC 2007]]'''


= Proposed ideas for the 2008 SoC =

== Integrating external libraries ==

Integrating one or more of those libraries could be great

=== libsamplerate ===

An existing experiment of processing exists as plugin.
Still  it is not working properly and proper configuration parameters must be found.

Working with different samplerates is a hard problem now in CLAM.
One solution could be using network configuration parameters (see GSoC project).
still, wave file could provide different samplerates thant the 
Also integration with FileReaders and Writers and with Backends will be useful.

This project consists in providing both a good Resampling processing and 
minimizing samplerate impedance between processings requiring a given samplerate,
audio files and the audio backend.

=== Libflac and libspeex ===

CLAM's AudioFileReaders/Writers use different backends for audio loading and saving.
Such backends offers the readers and writers a common interface to several libraries.
Current underlying libraries are
sndfile for wav, aiff, au, and others, libmad for MP3 and liboggvorbis for ogg/vorbis.

There are some other libraries developed at http://xiph.org/ which support other formats:
* libflac supports FLAC which is a lossless compression format
* libspeex supports speex format which is specialized on voice compression

This project will consist on adding support for such libraries in CLAM.

=== Aubio ===

Aubio provide nice realtime onset detection algorithms.
One project could be integrating aubio as processing(s) into clam.
Other task to be done is to create an Annotator extractor for Aubio.
There is an outdated example in CLAM/Example/TickExtractor 
that did tempo tracking and meter estimation for the Annotator.
Development on such example was discontinued during a period when aubio license was not clearly GPL.
Now it needs some work to have it working again.

This project could consist in providing processings that makes aubio features
availables on the NetworkEditor or/and making the TickExtractor example working again.

== Recovering from Processing errors ==

Some error conditions are not available until the processings are executed.
Such conditions are raised on processing thread while it should be detected
by the application interface thread.

This task (which is not a project by itself, but can complement others that are also small)
consists in implementing  a proper method of raising such error conditions and catching
without the application dying, just recovering the backend and stopping the player.

Also graphical (qt) handler of assertion failures has been disabled because
when the assertion is thrown from the processing thread the error message was
even more obscure that the console message you get with the plain console handler.
Another related task could be catching assertions and forward them to the application 
thread by any means without AssertFailure reaching the top of the processing thread stack.

== Enhancing plugin system ==

TODO: Split that in small project packages

Plugin systems are both a way of extending available
modules for CLAM (CLAM as a plugin host) 
and also a way of using CLAM networks in 3rd party contexts
(CLAM as a development tool to build plugins).

Several plugins systems exist: Ladspa, DSSI, LV2, VST, AudioUnits...
Also CLAM has its own plugin system to allow native 3rd party extensions.
After the last GSoC, CLAM supports some of them as host 
and some other as development tool, but there is still 
interesting aspects to be addressed:
* Integrating other kind of plugins being CLAM the host: LV2, VST...
* Plugin reloading and checking: one should be able to reload one kind of plugins or explicitly loading a given plugin
* Creating plugins given a CLAM network
** CLAM network as Ladspa/LV2 plugin
** CLAM network as VST plugin
** One button generation of plugins from NetworkEditor (native, LADSPA, VST...)
* Explicit plugin (re)loading
* Enabling Prototyper Qt interfaces in plugins systems that allow that such as VST, CoreUnits or LV2.

See more here: [[Devel/Plugins TODOs]]

This project has room for several projects. It also has contacts with many other projects: Subnetworks, metainformation, visual definition of processings... So if you choose this project, be specific on the set of aspects that will be addressed.

== Network Scalability (aka Subnetworks) ==

One compeling issue in CLAM is addressing scalability for the visual builder.
That means building processings modules out of a composition of existing ones.
CLAM supports that just by coding (ProcessingComposites),
but one could consider sinks and sources of a network the ports and controls
of a brand new processing.
A project to address that should include:
* Infrastructure to control the flow of recursive networks
* Integrating user-defined networks in the component library.
* Providing user interface on the NetworkEditor.
* ...

== Relative configurations and network configuration ==

That is being able to configure some parameters of a module in function
of other modules parameters or even network level ones.
* Some configuration parameters should take the value from other module parameters.
* We could consider output only parameters which are computed based on the input ones.
* We could add network level parameters so that we can change a repeated parameter at once.
* Network level parameters could become regular module configuration when used as a subnetwork
* A way of setting the connections that could be some hideable control ports with a different shape and position. Other could be editable expressions.

== Network Editor documentation system ==

The idea is providing networks and processing modules of documentation
which can be browsable and navigable from the network editor interface.
This project would include the interface and a system to obtain
metadata (web, webservice or just compiled information).

== Processing Editor ==

The idea is that one could build new compiled processing modules from the interface
by graphically defining the structure of the module and coding with an editor
the key methods.
* Defining a new processing just by defining the ports and the code in the Do method
* The system will compile it and will add it to the user's plugin library
* It would be great to have it integrated on the NetworkEditor
* This project could be related to the Python scripting project (see below) but we are considering C++ code here.

== Scripting CLAM in Python ==

* several approaches: Adhoc API or API export using SWIG or SIP
* build and use a clam network with python
* this could lead to a NetworkEditor python console with tab-completion (QPyConsole)
* use clam processings and processing-data with python. use it to visualize data, etc.
* write clam processings with python
** Related to the 'Processing editor' project
* Network scoring
** Sequencing changes on a network along the time
** Configurations, connections, control sending...

== Improve usability of SMSTools workflow ==

* Remove the files to process from the configuration and use configuration as presets
* Data to open are just audio or analysis data
* Object centric interaction: you apply an action (synthesis, analysis, transform) to an object
* Minimize the provided data by using object information (sampling rate on analysis, and most of the analysis parameters embedded on the object for resynthesis)

== Convergence of SMSTools and CLAM widgets infrastructure ==

* Transformation parameter automation using time-lines (ala ardour automation)
* Metadata based widgets
* Widgets interaction (zoom)
* Network based transformations. The user should be able to define the transformation chain using NetworkEditor.

== Real-time synthesizer using SMS models ==

* a new revamped but very simple salto synthesizer.
* a db of sms samples
* processings 
** to choose samples
** interpolate
** create stream flow
** etc.

== Vowel synthesizer ==

Build a educative program that would consist on:
* synthesizing different vowels by placing a point within the [http://en.wikipedia.org/wiki/Vowel_triangle Vowel triangle],
* and, the reverse, given an input vowel from the microphone place a dot on the triangle, so the students can check their pronunciation.
This could be enhanced by:
* displaying the mouth position for the vowel,
* visualizing the spectral peaks so they can identify the effect,
* changing the pitch,
* changing the synthesized gender,
* changing the vocal track characteristics,
* extracting user's vocal track characteristics for synthesized sound.

A teacher could limit the set of vowels to the ones used for 
a particular language such as Catalan or English,
so that the students just see the relevant ones for the exercise.



== Enhancing chord detection algorithm for real-time usage ==

Chord extraction on Network Editor is less precise than the one
available on the Annotator because it is realtime and it cannot
include the post processing Annotator does.
This project addresses enhancements to the algorithm for realtime
usage as well as visual representations to exploiting imprecise data 
so that user could figure out what's going on.

Due to the extend it could be split into a set of projects.
Check the details on the [[Chord Extraction TODO's]] page.

== CLAM for Video ==

* Add video processing/playback capabilities
* Extend current Port Monitor infrastructure to generative visual algorithms or user-defined mappings between the audio analysis features and the graphics
* Interface CLAM with GStreamer

== Qt based interfaces for CLAM Network based VST plugins ==

Enabling a Qt Designer interface to control a CLAM Network 
run as VST plugin the same way CLAM does now for JACK and PortAudio players.

== VAMP plugins on the Annotator ==

VAMP is the feature extraction plugin system used by SonicVisualizer.
This project would consist in being able to lauch VAMP plugins within the Annotator
and integrating its results in an Annotator data pool.

This project could be also defined for other descriptors source not being VAMP,
for example, public web services such as Lastfm, MusicBrainz, EchoNest...

== Annotation Merger ==

Currently BOCA system does pretty well by defining merges, projections and 
attribute renaming of several annotation sources (extractors, databases,
webservices...).

BOCA merging scripts (developed in python) are distributed with the annotator.
They are useful for example to combine several extractors locally or 
an extractor and a manually annotated ground truth and compare them.
But they are hard to use for a non expert user.

It would be nice to integrate into the annotator a tool to graphically configure 
how to perform such a merge to run it locally.
The idea is that a project could have, instead of a single extractor,
a combination of descriptors sources.

== Macro manipulation of descriptors with python on Annotator ==

Make the annotation data accessible to python scripts
so that one can automate repetitive descriptors manipulation.
Some use cases:
* "I want to correct an offset that a given segment annotation adds to all segments"
* "I want to extend a regular beat annotation and just correct when it varies"

== Enhancing Annotator Widgets ==

* Views for multibin frame parameters (spectrums, pcp's, chord correlation...)
* Frame level float editor
* More instant views
** Spectrum + peaks
** 
* Multiple segmentation panes
* Enhancing the usability of the segment editor
** Selection and edit actions (copy, paste..)
** Overlapping segments
** Displaying segment attributes as height
** Displaying segment attributes as color

== Flexible auralization on Annotator ==

Currently the auralization is limited to some kinds of descriptors auralization.
Currently just playing a tick on segment onset and 
float value frame level descriptors controlling the pitch of a tone.
This is still very limiting. 
By adding a general way to convert descriptors to control signals
they can be used to control an arbitrary synthesizer set by the user.
Possible solutions for that  could be a CLAM network with selected hooks
for descriptors or generating OSC or MIDI to control a synthesizer.

= Still not included =

Those ideas were discarded to be offered as SoC project but if you are still interested, just ask.

== CLAM documentation ==

* Document CLAM's examples and review tutorials
* Ideal project for non-expert first timers

== CLAM web browser plug-in ==

* Develop a plugin for basic CLAM Network edition through a web browser.

== Integrate Faust with CLAM. And spectral transformations with Faust ==

== Integration of aubio ==

* Integrate the aubio tempo library into CLAM and the CLAM Annotator
