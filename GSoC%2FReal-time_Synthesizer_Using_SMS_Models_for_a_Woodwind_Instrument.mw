= Application Information =

'''Title:''' [http://code.google.com/soc/2008/clam/appinfo.html?csaid=1902AE4E77AA7A08 Real-time Synthesizer Using SMS Models for a Woodwind Instrument]

'''Mentor:''' [http://parumi.wordpress.com/ Pau Arumí Albó]

'''License:''' [http://creativecommons.org/licenses/GPL/2.0/ GNU General Public License (GPL)]

'''Abstract:'''

= Details =

= Milestones =
''Add here pointers to another more general clam devel pages with TODO's''

= ''(optional)'' Blogging =
(Just like many other things, I hope that I had this in the first day when I started to work on this project.
Now it sounds like a mid-term report..)

SimpleOboeSynthesizer
and
continuousExcitationSynthesizer

This synthesizer for a woodwind (oboe) instrument is a further development
of Greg's continuousExcitationSynthesizer, a real-time synthesizer for an ebow-driven string instrument  in SoC 2007.

I decided to keep his design, especially the management of the metadata (in XML) of musical samples in SDIF.
So I can experiment with and gradually change the synthesizing guts.. 

Here is the link:

Let's start from (my understanding in) how it works.
[I give my comments inside square brackets] 
{I will put the changes that I've made or would make inside braces.}

1. Platform
It is supposed to work either as a plugin in Network Editor or as a command line tool.
For users to add the musical samples, a tool called Wav2SDIF is available in the console.
Also, loopMaker can convert any wave with a definite pitch to SDIF and find the loop point's by Earth Mover's distance.
{I only work with the command line tools so far, which is enough for me, but maybe not for end-users.}

2. Input from the instrument
It could take OSC or read the score files offline 
Rather than musical notation, the "score" file is actually a sequence of frequency-velocity frames, 
which is all the expression that the instrument could have.
The frequency is given in Hertz and the velocity, brightness in Greg's word, is a float between 0 and 1.
In this implementation, each frame has 1024 samples with HOP size 256 at sampling rate 44100Hz.

[The fundamental question is: how much control could an oboist have over the oboe? 
When I am thinking of a MIDI breath controller, this two-column "score" seem to be reasonable to me.
However, how the "velocity" reflects the dynamic of the sound is still open to me.]

{A minor problem in reading the text score is that Greg's code looked for "\r" as a delimiting symbol.
It was for CR in Mac as a line break but does not work for Linux '\n' or window \r\n as a line break.
I tried to make it working in 3 different platforms but did not test in windows.}

3.Sound Samples
A database of 6 notes (C5, D5, E5, F#5, G#5, C6) is used to synthesize the string instrument.
Essentially, the database gives the distribution of the spectral peaks ( and residue) for each note.
It is further transformed by SMS to cover all the pitches in the score.
The residue part is not used in Greg's version.

[Here the question is: how representative a note of a curtain pitch/dynamic could be in terms of the shape of its spectral peaks,
which is a key factor in the pitch-shifting operation in SMS.
To answer this question, in my experiment I used classical multidimensional scaling (CMDS) to embed 72 oboe note samples that span 2 octave in 3 dynamics (ff, mf, pp) into a 2 dimensional space. 
The distance between any 2 notes is measure by the sum of the squared difference between the first 10 normalized spectral peaks of each note.
As a result, the pitch seems to play a more important role in determining the distances between notes. The 2 dimensional picture explain only half of the variation though, it suggested that we would cover the all the pitches in the scale. For each pitch, 3 dynamics are given.
Somehow my database 
http://theremin.music.uiowa.edu/MIS.html
seems to be down at the moment.
72 oboes notes recorded in isolation are all I have at hand. Some of the note of dynamics pp are not very good.]

{Instead of using Greg's earth mover's distance,
I looked for the loop points using an external program R to detect the best zero crossing points.
The samples are all 16-bit [-32768,32767] and I set the tolerance to be within [-2,2].
It is easy for me to write a script in R to do this but I should make this available as an executable.}


(I will finish the rest part when I overcome the sleepiness caused by the painkiller :-)

4. Synthesis

The synthesizer will find and index all the SDIF files and associated XML files in a given fold as the material.
A "reader" associated with a SDIF/XML of a certain pitch will be loaded into memory in the initialization.

4.1 Voice
By the monophonic nature of this woodwind instrument (oboe), 
The input frequency-brightness frames, in a somewhat musical sense, could be viewed as streams of voices.
The purpose of having voices is to encapsulate the input sequences of frames into musical "notes", 
each of  which consists an attack stage and steady state.
If the difference in frequency between two consecutive input frame is above a certain threshold, a new voice will be issued.

4.2 Stages of a note

4.3 Frame preloading

4.4 Frame Buffering

4.5 Choosing a loop

4.6 Cross fading

== ''(optional)'' Selected posts ==
''The most relevant ones related with the project''

= Tasks prior to the coding period =

= Related links =

[[Category:GSoC2008]]
