== Scenario ==

This page explains how to develop your own library of processings,
to be used with the NetworkEditor/Prototyper tandem or any other CLAM based application.

TODO: Explain extra setup to provide ''configuration dialogs'' for the new processings.

== A sample SConstruct file ==

You can use this simple SConstruct file to compile all the processings found in a folder
and create a dynamic library with them.

'''Don't forget to change the 'libraryName' variable to your own library name'''

 import os, glob, sys
 
 libraryName='myclamlib'
 
 def scanFiles(pattern, paths) :
 	files = []
 	for path in paths :
 		files+=glob.glob(os.path.join(path,pattern))
 	return files
 
 def recursiveDirs(root) :
 	return filter( (lambda a : a.rfind( ".svn")==-1 ),  [ a[0] for a in os.walk(root)]  )
 
 options = Options('options.cache', ARGUMENTS)
 options.Add(PathOption('clam_prefix', 'The prefix where CLAM was installed', '/bad/path'))
 if platform=='linux2' :
 	options.Add(BoolOption('crossmingw', 'Activates the MinGW Windows crosscompiling mode', 'no'))
 
 env = Environment(ENV=os.environ, options=options)
 options.Save('options.cache', env)
 Help(options.GenerateHelpText(env))
 env.SConsignFile() # Single signature file
 
 CLAMInstallDir = env['clam_prefix']
 clam_sconstoolspath = os.path.join(CLAMInstallDir,'share','clam','sconstools')
 if env['crossmingw'] :
 	env.Tool('crossmingw', toolpath=[clam_sconstoolspath])
 env.Tool('clam', toolpath=[clam_sconstoolspath])
 env.EnableClamModules([
 	'clam_core',
 	'clam_audioio',
 	'clam_processing',
 	] , CLAMInstallDir)
 
 sourcePaths = recursiveDirs(".")
 sources = scanFiles('*.cxx', sourcePaths)
 sources = dict.fromkeys(sources).keys()
 if sys.platform=='linux2' :
 	env.Append( CCFLAGS=['-g','-O3','-Wall'] )
 libraries = [
 	env.SharedLibrary(target=libraryName, source = sources),
 	]
 
 install = env.Install(os.path.join(CLAMInstallDir,'lib'), libraries)
 
 env.Alias('install', install)
 env.Default(libraries)



Build the library by doing:
 $ scons clam_prefix=path/to/installed/clam/prefix

Install it the same place you have CLAM by issuing:
 $ scons install

== Usage: compile time mode (deprecated) ==

To use the library from the NetworkEditor, Prototyper... you should add this line to its SConstruct file:

 env.AppendUnique(LIBS='myclamlib')

And recompile it. Add also any 3rd party library not already used in CLAM distribution.

As no symbol from the processing library is directly accessed by the NetworkEditor,
you won't need to recompile NetworkEditor
just recompiling and reinstalling your library. (At least in Linux)

== Usage: Run time mode (experimental) ==

As for CLAM 1.1.1 (svn) we can load processing plugins on runtime, 
just by placing the library in a given directory.

This is work in progress. 
It just works in Linux by putting the dll in a hardcoded /usr/lib/clam directory.
So you should change the hardcoded path or moving the libraries there.

In the future, (final 1.1.1 release?) we aim to support the rest platforms, and
looking for a set of paths. Including user writeable paths and 
taking some environment variable into account.
