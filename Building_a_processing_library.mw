== Scenario and limitations ==

This page explains how to proceed when you are developing a set of processings,
you want to try them and you have your own source tree.

The procedure just works but it will eventually evolve toward a dynamic loading of dlls.

It also does not provide a way of having Configuration dialogs for the processing.
That will come soon.

== A sample SConstruct file ==

You can use this simple SConstruct file to compile all the processings found in a folder
and create a dynamic library with them.

 import os, glob, sys
 
 libraryName='myclamlib'
 
 def scanFiles(pattern, paths) :
 	files = []
 	for path in paths :
 		files+=glob.glob(os.path.join(path,pattern))
 	return files
 
 def recursiveDirs(root) :
 	return filter( (lambda a : a.rfind( ".svn")==-1 ),  [ a[0] for a in os.walk(root)]  )
 
 options = Options('options.cache', ARGUMENTS)
 options.Add(PathOption('clam_prefix', 'The prefix where CLAM was installed', ''))
 
 env = Environment(ENV=os.environ, options=options)
 options.Save('options.cache', env)
 Help(options.GenerateHelpText(env))
 env.SConsignFile() # Single signature file
 
 CLAMInstallDir = env['clam_prefix']
 clam_sconstoolspath = os.path.join(CLAMInstallDir,'share','clam','sconstools')
 nv.Tool('clam', toolpath=[clam_sconstoolspath])
 env.EnableClamModules([
 	'clam_core',
 	'clam_audioio',
 	'clam_processing',
 	] , CLAMInstallDir)
 
 sourcePaths = recursiveDirs(".")
 sources = scanFiles('*.cxx', sourcePaths)
 sources = dict.fromkeys(sources).keys()
 if sys.platform=='linux2' :
 	env.Append( CCFLAGS=['-g','-O3','-Wall'] )
 libraries = [
 	env.SharedLibrary(target=libraryName, source = sources),
 	]
 
 install = env.Install(os.path.join(CLAMInstallDir,'lib'), libraries)
 
 env.Alias('install', install)
 env.Default(libraries)

Don't forget to change the 'libraryName' variable to your taste

Build the library by doing:
 $ scons clam_prefix=path/to/installed/clam/prefix

Install it the same place you have CLAM by issuing:
 $ scons install

To use the library from the NetworkEditor, Prototyper... you should add this line to its SConstruct file:

 env.AppendUnique(LIBS='myclamlib')

And recompile it. Add also any 3rd party library not already used in CLAM distribution.

As no symbol from the processing library is directly accessed by the NetworkEditor,
you won't need to recompile NetworkEditor
just recompiling and reinstalling your library.
