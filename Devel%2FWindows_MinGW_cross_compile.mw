'''Ongoing work on cross compiling CLAM for Windows from Ubuntu'''

== Installing mingw32 and Wine in ubuntu ==

 sudo apt-get install mingw32
 sudo apt-get install wine

You can test that that works

 $ cat > hello.cxx <<EOF
 > #include <iostream>
 > int main()
 > {
 >         std::cout << "Hello world"  << std::endl;
 > }
 > EOF
 
 $ i586-mingw32msvc-g++ hello.cxx
 
 $ file a.exe
 a.exe: MS-DOS executable PE  for MS Windows (console) Intel 80386 32-bit
 
 $ ./a.exe
 Hello world

So it works! We are building and executing a windows binary.

== Crosscompiling with Qt ==

Lets download Qt.

 $ wget -c http://ftp.iasi.roedu.net/mirrors/ftp.trolltech.com/qt/source/qt-win-opensource-4.2.3-mingw.exe
 $ chmod a+x qt-win-opensource-4.2.3-mingw.exe
 $ ./qt-win-opensource-4.2.3-mingw.exe

I accepted to intall mingw32 again but in the fake windows.
This installs by default Qt on ~/.wine/fake_windows/Qt/4.2.3/, so

 $ ~/.wine/fake_windows/Qt/4.2.3/bin/designer.exe

[[image:Mingw32DesignerUnderWine.png|thumb|Mingw Designer running on wine]]

 $ export QTDIR=~/.wine/fake_windows/Qt/4.2.3/

Edit the following file helloqt.cxx

 #include <QtGui/QApplication>
 #include <QtGui/QMessageBox>
 
 int main(int argc, char** argv)
 {
         QApplication app(argc,argv);
         QMessageBox::warning(0,"Warning","Windows is about to be deprecated as development platform!");
 }

And now lets compile it.

 $ i586-mingw32msvc-g++ -o helloqt.exe helloqt.cxx -L $QTDIR/lib -I $QTDIR/include -l QtCore4 -lQtGui4 

Windows requires dll's to be on PATH or on the same dir.
I don't know how to set PATH on wine so i just copied them on the binary folder.

 $ cp $QTDIR/bin/*dll .
 $ ./helloqt.exe

[[image:Mingw32WineHelloQt.png|center|Our fist crosscompiled Qt app]]


== Does it runs CLAM? ==

Let check whether Wine is able to run existing CLAM binaries.

* Download the latest version of CLAM NetworkEditor for Windows.
* Run winecfg and set the audio backend (i choose ALSA)
* Obtain a missing DLL  http://www.dlldump.com/download-dll-files_new.php/dllfiles/M/MSVCIRT.DLL/7.0.2600.2180/download.html
** THIS IS A PACKAGING BUG!!!
* Run it with Wine

[[image:WineRunningNetworkEditorVC.png|center|Wine running the NetworkEditor compiled with VisualC]]

It runs with a lot of underruns but it works and the goodness of the build procces on mingw can be tested.

== Crosscompiling PortAudio ==

Port audio has some dependencies. So let's provide them.

=== Asio ===

Download [http://www.steinberg.net/329+M52087573ab0.html Asio SDK].
 $ unzip asiosdk2.2.zip
 $ mv ASIOSDK2 asiosdk2

It just provides a .dsp file to build. 
I managed to have a Makefile to crosscompile with mingw.

TODO: A link or whatever for the Makefile.

=== DirectX ===

The Allegro project has a binary for all the DX versions compiled with mingw.

 $ wget -c http://alleg.sourceforge.net/files/dx80_mgw.zip

The zip just has a 'lib' and 'include' folders, so create
a directory named 'directx' and unzip there.


=== Portaudio ===

Once the dependencies are available let's compile portaudio.

 $ wget -c http://www.portaudio.com/archives/pa_snapshot_v19.tar.gz

Apply the patch to have a sane Makefile and adapt the sources.

TODO: Link to the patch.

To test it just issue this command from the build/dev-cpp folder (change the wire example if you want).

 $ i586-mingw32msvc-c++ ../../test/patest_wire.c portaudio19.dll -I ../../include/

== Crosscompiled FFTW3 ==

A precompiled mingw binary is available [ftp://ftp.fftw.org/pub/fftw/fftw-3.1.2-dll.zip here].
* Create a folder named 'fftw3', 'fftw3/lib' and 'fftw3/include'
* Enter the directory and decompress inside it,
* move the files to the proper directories
 $ mv *dll *def lib
 $ mv fftw3.h fftw3.f include

== ID3Lib ==

http://kent.dl.sourceforge.net/sourceforge/id3lib/id3lib-3.8.3binaries.zip
