'''Ongoing work on cross compiling CLAM for Windows from Ubuntu'''

== Installing mingw32 and Wine in ubuntu ==

 sudo apt-get install mingw32
 sudo apt-get install wine

You can test such programs work by doing:

 $ cat > hello.cxx <<EOF
 #include <iostream>
 int main()
 {
         std::cout << "Hello world"  << std::endl;
 }
 EOF
 
 $ i586-mingw32msvc-g++ hello.cxx
 
 $ file a.exe
 a.exe: MS-DOS executable PE  for MS Windows (console) Intel 80386 32-bit
 
 $ ./a.exe
 Hello world

So it works! We are building and executing a windows binary.

== Crosscompiling with Qt ==

Lets download Qt.

 $ wget -c http://ftp.iasi.roedu.net/mirrors/ftp.trolltech.com/qt/source/qt-win-opensource-4.3.1-mingw.exe
 $ chmod a+x qt-win-opensource-4.3.3-mingw.exe
 $ ./qt-win-opensource-4.3.3-mingw.exe

I accepted to intall mingw32 again but in the fake windows.
This installs by default Qt on ~/.wine/drive_c/Qt/4.3.3/, so

 $ ~/.wine/drive_c/Qt/4.3.3/bin/designer.exe

[[image:Mingw32DesignerUnderWine.png|thumb|Mingw Designer running on wine]]

 $ export QTDIR=~/.wine/drive_c/Qt/4.3.3/

Edit the following file helloqt.cxx

 #include <QtGui/QApplication>
 #include <QtGui/QMessageBox>
 
 int main(int argc, char** argv)
 {
         QApplication app(argc,argv);
         QMessageBox::warning(0,"Warning","Windows is about to be deprecated as development platform!");
 }

And now lets compile it.

 $ i586-mingw32msvc-g++ -o helloqt.exe helloqt.cxx -L $QTDIR/lib -I $QTDIR/include -l QtCore4 -lQtGui4 

Windows requires dll's to be on PATH or on the same dir.
I don't know how to set PATH on wine so i just copied them on the binary folder.

 $ cp $QTDIR/bin/Qt*dll .
 $ ./helloqt.exe

[[image:Mingw32WineHelloQt.png|center|Our fist crosscompiled Qt app]]

== Does wine runs current Visual based CLAM release? ==

Let check whether Wine is able to run existing CLAM binaries.

* Download the latest version of CLAM NetworkEditor for Windows.
* Install any or all wine audio backend (esd, alsa, jack...)
* Run winecfg and set the desired audio backend (i chose ALSA)
* Obtain a missing DLL '''THIS IS A PACKAGING BUG on the former MSVC based binaries!!!''' http://www.dlldump.com/download-dll-files_new.php/dllfiles/M/MSVCIRT.DLL/7.0.2600.2180/download.html
* Run it with Wine

[[image:WineRunningNetworkEditorVC.png|center|Wine running the NetworkEditor compiled with VisualC]]

It runs with a lot of underruns but it works so we can check goodness of the build procces on mingw can be tested.

Well not all works as desired. OpenGl Based views doesn't work properly.

[[image:WineRunningNetworkEditorVC-OpenGlBug.png|center|As you introduce an OpenGl view, the interface framebuffer gets messed]]

== Crosscompiling PortAudio ==

Port audio has some dependencies. So let's provide them.

=== Asio ===

Download [http://www.steinberg.net/329+M52087573ab0.html Asio SDK].
 $ unzip asiosdk2.2.zip
 $ mv ASIOSDK2 asiosdk2

It just provides a .dsp file to build. 
I managed to have a Makefile to crosscompile with mingw.

<pre>
# Be careful when cut and pasting, ALL INDENTATIONS MUST BE TAB'S!!
CXX=i586-mingw32msvc-g++
AR=i586-mingw32msvc-ar
BIN=asiosdk2.a
SOURCES:= \
    common/asio.cpp \
    common/combase.cpp \
    common/debugmessage.cpp \
    common/register.cpp \
    host/ASIOConvertSamples.cpp \
    host/asiodrivers.cpp \
    host/pc/asiolist.cpp \
#   host/sample/hostsample.cpp \
    host/mac/asioshlib.cpp \
    host/mac/codefragments.cpp \
    driver/asiosample/makesamp.cpp \
    driver/asiosample/asiosmpl.cpp \
    driver/asiosample/wintimer.cpp \
    driver/asiosample/macnanosecs.cpp \
    driver/asiosample/mactimer.cpp \
    common/asiodrvr.cpp \
    common/dllentry.cpp \

OBJS:=$(SOURCES:.cpp=.o)
CFLAGS=-Icommon -Ihost -Ihost/pc/
LDFLAGS=-lkernel32 -luser32 -lgdi32 -lshell32 -luuid -lole32 -lwinmm


${BIN} : $(OBJS)
    ${AR} rcs $(BIN) $(OBJS)

%.o: %.cpp
    ${CXX} ${CFLAGS} -c $< -o $@
</pre>

=== DirectX ===

* Download the devpak for DirectX 9 from http://devpaks.org/details.php?devpak=136
* Unzip de file as it were a tar.bz file
 $ tar xvfz DirectX90c.DevPackage
* move and rename the DirectX90c folder as directx in the sandbox
 $ mv DirectX90c ../directx
* You may need to remove some of trailing directories the tarbal left there.
 $ rmdir DirectX90c\\* 


'''Deprecated procedure for older version directx 8'''

The Allegro project has a binary for all the DX versions compiled with mingw.

 $ cd download
 $ wget -c http://alleg.sourceforge.net/files/dx80_mgw.zip
 $ cd ..
 $ mkdir directx
 $ cd directx
 $ unzip ../download/dx80_mgw.zip

The zip just has a 'lib' and 'include' folders, so previous commands create
a directory named 'directx' and unzip there.

=== Portaudio ===

Once the dependencies are available let's compile portaudio.

 wget -c http://www.portaudio.com/archives/pa_snapshot_v19.tar.gz
 tar xvfz pa_snapshot_v19.tar.gz
 cd portaudio
 cat > SConstruct.crossmingw

<pre>
#!/usr/bin/python
import glob
env=Environment()
env.Tool('crossmingw', toolpath=['../clam/CLAM/scons/sconstools'])

env.AppendUnique(CPPPATH=[
	'../asiosdk2',
	'../asiosdk2/common',
	'../asiosdk2/host',
	'../asiosdk2/host/pc',
	'../directx/include',
	'src/common',
 	'src/os/win',
	'include',
])
env.AppendUnique(LDFLAGS = [
	'-fmessage-length=0',
	'--add-stdcall-alias',
])

env.AppendUnique(LIBS=[
	'kernel32',
	'user32',
	'gdi32',
	'shell32',
	'ole32',
	'uuid',
	'winmm',
	'setupapi',
])

env.AppendUnique(CXXFLAGS=['-O3','-s','-Wall'])
env.AppendUnique(CPPDEFINES=[
	('BUILDING_DLL','1'),
])

sourcePaths = [
	'src/common',
	'src/os/win',
	'src/hostapi/asio',
	'src/hostapi/dsound',
	'src/hostapi/wmme',
	'src/hostapi/wasapi',
	'src/hostapi/wdmks',
]
blacklist = [
	'src/os/win/pa_x86_plain_converters.c',
]
sources=[]
for sourcePath in sourcePaths :
	sources += glob.glob(sourcePath+"/*.cpp")
	sources += glob.glob(sourcePath+"/*.c")
for blacksheep in blacklist:
	sources.remove(blacksheep)

env.SharedLibrary("portaudio",sources+["../asiosdk2/asiosdk2.a"])
</pre> 

(Not needed in latest portaudio version) Change the file portaudio/src/hostapi/dsound/pa_win_ds_dynlink.h
<pre>
63c63
< #include <DSound.h>
---
> #include <dsound.h>
</pre>

(requires crossming.py file from clam)
 scons -f SConstruct.crossmingw
 mkdir lib
 cp portaudio.def portaudio.dll portaudio.lib lib
 cp portaudio.dll ../dlls 

To test it just issue this command from the build/dev-cpp folder (change the wire example if you want).

 i586-mingw32msvc-c++ test/patest_sine.c portaudio.dll -I include/
 ./a.exe

== Crosscompiled FFTW3 ==

A precompiled mingw binary is available [ftp://ftp.fftw.org/pub/fftw/fftw-3.1.2-dll.zip here].
* Create a folder named 'fftw3', 'fftw3/lib' and 'fftw3/include'
* Enter the directory and decompress inside it,
* move the files to the proper directories
 mkdir -p fftw3/{lib,include} dlls
 cd fftw3
 unzip ../fftw-3.1.2-dll.zip
 mv *dll *def lib
 mv fftw3.h fftw3.f include
 cp lib/libfftw3-3.dll ../dlls/

== LibMad ==

With previously compiled binary of libmad didn't work for mingw so i recompiled it.

http://kent.dl.sourceforge.net/sourceforge/mad/libmad-0.15.1b.tar.gz

The stardard distribution supports mingw crosscompiling.

 CC=i586-mingw32msvc-gcc ./configure  --host=mingw32

use this SConstruct

<pre>
import glob
env=Environment()
env.Tool('crossmingw', toolpath=['../clam/CLAM/scons/sconstools'])
env.AppendUnique(CPPPATH=[
    ".",
    ])
env.AppendUnique(CPPDEFINES=[
    "HAVE_CONFIG_H",
    "FPM_INTEL",
    "ASO_ZEROCHECK",
    ])
env.AppendUnique(CCFLAGS=[
    "-Wall",
    "-g",
    "-O",
    "-fforce-mem",
    "-fforce-addr",
    "-fthread-jumps",
    "-fcse-follow-jumps",
    "-fcse-skip-blocks",
    "-fexpensive-optimizations",
    "-fregmove",
    "-fschedule-insns2",
    "-fstrength-reduce",
    ])
sources = glob.glob("*.c")
sources.remove("minimad.c")
env.Library("libmad",sources)
</pre>

 scons
 mkdir -p ../libmad/{lib,include}
 cp mad.h ../libmad/include
 cp libmad.lib ../libmad/lib

== id3lib ==

I tried those VC binaries and they don't work:

http://kent.dl.sourceforge.net/sourceforge/id3lib/id3lib-3.8.3binaries.zip

So i tried to build from sources.

http://ovh.dl.sourceforge.net/sourceforge/id3lib/id3lib-3.8.3.zip

i had to comment out some lines on the configure.in (line 251)

 C_CHECK_FUNCS(mkstemp)
 #AC_CHECK_FUNCS(
 #  truncate                      \
 #  ,,AC_MSG_ERROR([Missing a vital function for id3lib])
 #)
 
 dnl Checks for typedefs, structures, and compiler characteristics.

Edit include/id3/globals.h line 44
 < #ifdef WIN32
 --
 > #ifdef __MSVC_VER


And create the following 'SConstruct' file:
 import glob
 
 env=Environment()
 env.Tool('crossmingw', toolpath=['../clam/CLAM/scons/sconstools'])
 
 env.AppendUnique(CPPPATH=[
 	".", 
 	"include",
 	"include/id3",
 	"zlib/include",
 	])
 env.AppendUnique(CPPDEFINES=[
 	"HAVE_CONFIG_H",
 	("ID3LIB_LINKOPTION",1),
 	])
 sources = glob.glob("src/*cpp")+glob.glob('zlib/src/*.c')
 env.Library("id3lib",sources)

Adapt Tool path on the previous file to your clam scons location. 
Then:
 autoconf
 CC=i586-mingw32msvc-gcc CXX=i586-mingw32msvc-g++ ./configure
 scons
 mkdir -p ../id3lib/{lib,include}
 cp id3lib.lib ../id3lib/lib/
 cp -r include ../id3lib/

== libsndfile ==

=== By using precompiled binary on its web ===

'''It doesn't work''' Try with the cross compiling option

http://www.mega-nerd.com/libsndfile/libsndfile-1_0_17.zip

It comes with precompiled binaries:

 mkdir -p ../libsndfile/{lib,include}
 cp libsndfile-1.dll ../libsndfile/lib/libsndfile.dll
 cp sndfile.{h,hh} ../libsndfile/include/

It is missing the lib.

=== By crosscompiling ===


 cd download
 wget http://www.mega-nerd.com/libsndfile/libsndfile-1.0.17.tar.gz
 tar xvfz libsndfile-1.0.17.tar.gz
 cd libsndfile-1.0.17
 CXX=i586-mingw32msvc-g++ RANLIB=i586-mingw32msvc-ranlib AR=i586-mingw32msvc-ar CC=i586-mingw32msvc-gcc ./configure mingw32
 make
 mkdir -p ../libsndfile/{lib,include,bin}
 cp src/.libs/libsndfile-1.dll ../dlls
 cp src/.libs/libsndfile-1.dll ../libsndfile/lib/
 cp src/.libs/libsndfile.dll.a ../libsndfile/lib/libsndfile.lib
 cp src/libsndfile.la ../libsndfile/lib/
 cp src/libsndfile.def ../libsndfile/lib/
 cp src/sndfile.h ../libsndfile/include/

== libogg and libvorbis ==

I didn't managed to crosscompile them my self, but i found some precompiled binaries.

 cd download
 wget http://globulation2.org/dev/glob2_required_libs_mingw.tar.bz2
 mkdir glob
 cd glob/
 tar xvfj ../glob2_required_libs_mingw.tar.bz2
 cd ../..
 mkdir -p oggvorbis/{lib,include,bin}
 cp download/glob/lib/*ogg* oggvorbis/lib/
 cp download/glob/lib/*vorbis* oggvorbis/lib/
 cp -r download/glob/include/ogg/ oggvorbis/include/
 cp -r download/glob/include/vorbis/ oggvorbis/include/
 cp download/glob/bin/*ogg* dlls/
 cp download/glob/bin/*ogg* oggvorbis/bin/
 cp download/glob/bin/*vorbis* oggvorbis/bin/
 cp download/glob/bin/*vorbis* dlls/


== pthreads ==

 cd download
 wget ftp://sourceware.org/pub/pthreads-win32/pthreads-w32-2-8-0-release.exe
 cd ..
 unzip download/pthreads-w32-2-8-0-release.exe Pre-built.2/*
 mv Pre-built.2 pthreads
 cp pthreads/lib/pthreadGCE2.dll dlls/


On some scenarios this seems not to work. Try this:

 cd download
 wget 'http://www.mirrorservice.org/sites/sourceware.org/pub/pthreads-win32/pthreads-w32-2-8-0-release.tar.gz'
 tar xvfz pthreads-w32-2-8-0-release.tar.gz
 cd pthreads-w32-2-8-0-release
 make CROSS=i586-mingw32msvc- GC-inlined
 mkdir -p ../../pthreads/{include,lib,bin}
 cp libpthreadGC2.a ../../pthreads/lib
 cp *.h ../../pthreads/include
 cp pthreadGC2.dll ../../dlls

== cppunit ==

To get some extra autoconf macros and libtool do:
 sudo apt-get install autoconf-archive libtool automake

Then:

 cd download 
 cvs -z3 -d:pserver:anonymous@cppunit.cvs.sourceforge.net:/cvsroot/cppunit co -P -d cppunit-cvs cppunit
 cd cppunit-cvs
 ./autogen.sh
 ./configure --host=i586-mingw32msvc --prefix=$HOME/CajitasDeArena/mingw/cppunit
 make
 make install
 cp src/cppunit/.libs/libcppunit-1-12-0.dll ../../dlls

== Xerces-C ==

No supported yet. Work on progress.

== libxml++ ==

There are precompiled binaries are this page:

http://ftp.gnome.org/pub/gnome/binaries/win32/gtkmm/2.10/gtkmm-win32-devel-2.10.11-1.exe

Execute it  with wine to install gtk and then:

 mkdir -p gtk
 cp -r /home/vokimon/.wine/drive_c/GTK/{include,lib,bin} gtk

GTK adds the bin folder to the wine PATH, this is needed just for NSIS to find the dll's
 cp gtk/bin/*.dll dlls

== libsamplerate ==

'''Not a current CLAM dependency. Just an experiment'''

 cd downloads
 wget http://www.mega-nerd.com/SRC/libsamplerate-0.1.2.tar.gz
 tar xvfz libsamplerate-0.1.2.tar.gz
 cd libsamplerate-0.1.2
 PKG_CONFIG=../../gtk/bin/pkg-config.exe RANLIB=i586-mingw32msvc-ranlib CC=i586-mingw32msvc-gcc CXX=i586-mingw32msvc-g++ ./configure --target i586-mingw32msvc --prefix=/home/vokimon/CajitasDeArena/mingw/libsamplerate
 QTDIR=~/.wine/drive_c/Qt/4.3.1/ scons clam_prefix=~/CajitasDeArena/mingw/local prefix=~/CajitasDeArena/mingw/local external_dll_path=~/CajitasDeArena/mingw/dlls crossmingw=1 package

== NSIS ==

Download the Installer and install it with wine:

http://mesh.dl.sourceforge.net/sourceforge/nsis/nsis-2.31-setup.exe

== Py2Exe ==

[http://www.py2exe.org/ py2exe] is needed to add Annotator's support for Boca tasks. 

Download and install python
 wget http://python.org/ftp/python/2.5.1/python-2.5.1.msi
 msiexec /i python-2.5.1.msi

Download py2exe and install it.
 wget http://switch.dl.sourceforge.net/sourceforge/py2exe/py2exe-0.6.6.win32-py2.5.exe
 wine py2exe-0.6.6.win32-py2.5.exe


 cd clam/Annotator/SimacServicesClient
 mkdir -p build/bdist.win32/winexe/bundle-2.5
 cp /home/vokimon/.wine/drive_c/windows/system32/python25.dll build/bdist.win32/winexe/bundle-2.5
 wine /home/vokimon/.wine/drive_c/Python25/python.exe buildExeFromPython.py

Still getting errors at this point

== CLAM ==

Apply the CLAM tree the patch with the higher number in this download page.
 http://clam.iua.upf.edu/download/win/mingw32-spike/



Add the dll path to the ~/.wine/system.reg
Section [System\\CurrentControlSet\\Control\\Session Manager\\Environment], Key PATH
 "PATH"="c:\\windows\\system32;c:\\windows;z:\\home\\vokimon\\CajitasDeArena\\mingw\\local\\lib;z:\\home\\vokimon\\CajitasDeArena\\mingw\\dlls"

The "z:\\home\\vokimon\\CajitasDeArena\\mingw" part will vary on your case.

copy the qt4 dlls
 cp /home/vokimon/.wine/drive_c/Qt/4.3.3/bin/*dll dlls

 mkdir local
 svn co http://iua-share.upf.edu/mnt/svn/clam/trunk clam
 cd clam/CLAM
 scons configure with_fftw3=1 with_fftw=0 audio_backend=portaudio xmlbackend=xmlpp prefix=~/CajitasDeArena/mingw/local sandbox_path=~/CajitasDeArena/mingw/ crossmingw=1
 scons
 cp scons/libs/*/*dll ../../dlls
 scons install
 cd ../NetworkEditor
 QTDIR=~/.wine/drive_c/Qt/4.3.3/ scons clam_prefix=~/CajitasDeArena/mingw/local prefix=~/CajitasDeArena/mingw/local external_dll_path=~/CajitasDeArena/mingw/dlls crossmingw=1 package
 cd ../Annotator/vmqt
 QTDIR=~/.wine/drive_c/Qt/4.3.3/ scons clam_prefix=~/CajitasDeArena/mingw/local crossmingw=1
 cd ..
 QTDIR=~/.wine/drive_c/Qt/4.3.3/ scons prefix=~/CajitasDeArena/mingw/local  clam_prefix=~/CajitasDeArena/mingw/local external_dll_path=~/CajitasDeArena/mingw/dlls crossmingw=1 package
