'''Ongoing work on cross compiling CLAM for Windows from Ubuntu'''

== Installing mingw32 and Wine in ubuntu ==

 sudo apt-get install mingw32
 sudo apt-get install wine

You can test that that works

 $ cat > hello.cxx <<EOF
 > #include <iostream>
 > int main()
 > {
 >         std::cout << "Hello world"  << std::endl;
 > }
 > EOF
 
 $ i586-mingw32msvc-g++ hello.cxx
 
 $ file a.exe
 a.exe: MS-DOS executable PE  for MS Windows (console) Intel 80386 32-bit
 
 $ ./a.exe
 Hello world

So it works! We are building and executing a windows binary.

== Crosscompiling with Qt ==

Lets download Qt.

 $ wget -c http://ftp.iasi.roedu.net/mirrors/ftp.trolltech.com/qt/source/qt-win-opensource-4.2.3-mingw.exe
 $ chmod a+x qt-win-opensource-4.2.3-mingw.exe
 $ ./qt-win-opensource-4.2.3-mingw.exe

I accepted to intall mingw32 again but in the fake windows.
This installs by default Qt on ~/.wine/fake_windows/Qt/4.2.3/, so

 $ ~/.wine/fake_windows/Qt/4.2.3/bin/designer.exe

[[image:Mingw32DesignerUnderWine.png|thumb|Mingw Designer running on wine]]

 $ export QTDIR=~/.wine/fake_windows/Qt/4.2.3/

Edit the following file helloqt.cxx

 #include <QtGui/QApplication>
 #include <QtGui/QMessageBox>
 
 int main(int argc, char** argv)
 {
         QApplication app(argc,argv);
         QMessageBox::warning(0,"Warning","Windows is about to be deprecated as development platform!");
 }

And now lets compile it.

 $ i586-mingw32msvc-g++ -o helloqt.exe helloqt.cxx -L $QTDIR/lib -I $QTDIR/include -l QtCore4 -lQtGui4 

Windows requires dll's to be on PATH or on the same dir.
I don't know how to set PATH on wine so i just copied them on the binary folder.

 $ cp $QTDIR/bin/*dll .
 $ ./helloqt.exe

[[image:Mingw32WineHelloQt.png|center|Our fist crosscompiled Qt app]]


== Does wine runs current Visual based CLAM release? ==

Let check whether Wine is able to run existing CLAM binaries.

* Download the latest version of CLAM NetworkEditor for Windows.
* Install any or all wine audio backend (esd, alsa, jack...)
* Run winecfg and set the desired audio backend (i chose ALSA)
* Obtain a missing DLL '''THIS IS A PACKAGING BUG!!!''' http://www.dlldump.com/download-dll-files_new.php/dllfiles/M/MSVCIRT.DLL/7.0.2600.2180/download.html
* Run it with Wine

[[image:WineRunningNetworkEditorVC.png|center|Wine running the NetworkEditor compiled with VisualC]]

It runs with a lot of underruns but it works so we can check goodness of the build procces on mingw can be tested.

Well not all works as desired. OpenGl Based views doesn't work properly.

[[image:WineRunningNetworkEditorVC-OpenGlBug.png|center|As you introduce an OpenGl view, the interface framebuffer gets messed]]

== Crosscompiling PortAudio ==

Port audio has some dependencies. So let's provide them.

=== Asio ===

Download [http://www.steinberg.net/329+M52087573ab0.html Asio SDK].
 $ unzip asiosdk2.2.zip
 $ mv ASIOSDK2 asiosdk2

It just provides a .dsp file to build. 
I managed to have a Makefile to crosscompile with mingw.

TODO: A link or whatever for the Makefile.

=== DirectX ===

The Allegro project has a binary for all the DX versions compiled with mingw.

 $ wget -c http://alleg.sourceforge.net/files/dx80_mgw.zip

The zip just has a 'lib' and 'include' folders, so create
a directory named 'directx' and unzip there.


=== Portaudio ===

Once the dependencies are available let's compile portaudio.

 wget -c http://www.portaudio.com/archives/pa_snapshot_v19.tar.gz
 tar xvfz pa_snapshot_v19.tar.gz
 cd portaudio
 cat > SConstruct.crossmingw

<pre>
#!/usr/bin/python
import glob
env=Environment()
env.Tool('crossmingw', toolpath=['../clam/CLAM/scons/sconstools'])

env.AppendUnique(CPPPATH=[
	'../asiosdk2',
	'../asiosdk2/common',
	'../asiosdk2/host',
	'../asiosdk2/host/pc',
	'../directx/include',
	'src/common',
	'include',
])
env.AppendUnique(LDFLAGS = [
	'-fmessage-length=0',
	'--add-stdcall-alias',
])

env.AppendUnique(LIBS=[
	'kernel32',
	'user32',
	'gdi32',
	'shell32',
	'ole32',
	'uuid',
	'winmm',
])

env.AppendUnique(CXXFLAGS=['-O3','-s','-Wall'])
env.AppendUnique(CPPDEFINES=[
	('BUILDING_DLL','1'),
])

sourcePaths = [
	'src/common',
	'src/os/win',
	'src/hostapi/asio',
	'src/hostapi/dsound',
	'src/hostapi/wmme',
]
blacklist = [
	'src/os/win/pa_x86_plain_converters.c',
]
sources=[]
for sourcePath in sourcePaths :
	sources += glob.glob(sourcePath+"/*.cpp")
	sources += glob.glob(sourcePath+"/*.c")
for blacksheep in blacklist:
	sources.remove(blacksheep)

env.SharedLibrary("portaudio",sources+["../asiosdk2/asiosdk2.a"])
</pre> 

Change the file portaudio/src/hostapi/dsound/pa_win_ds_dynlink.h
<pre>
63c63
< #include <DSound.h>
---
> #include <dsound.h>
</pre>

 scons -f SConstruct.crossmingw
 mkdir lib
 cp portaudio.def portaudio.dll portaudio.lib lib

To test it just issue this command from the build/dev-cpp folder (change the wire example if you want).

 i586-mingw32msvc-c++ test/patest_sine.c portaudio.dll -I include/
 ./a.exe

== Crosscompiled FFTW3 ==

A precompiled mingw binary is available [ftp://ftp.fftw.org/pub/fftw/fftw-3.1.2-dll.zip here].
* Create a folder named 'fftw3', 'fftw3/lib' and 'fftw3/include'
* Enter the directory and decompress inside it,
* move the files to the proper directories
 $ mkdir fftw3
 $ cd fftw3
 $ mkdir lib include
 $ unzip ../fftw-3.1.2-dll.zip
 $ mv *dll *def lib
 $ mv fftw3.h fftw3.f include

== LibMad ==

With previously compiled binary of libmad didn't work for mingw so i recompiled it.

http://kent.dl.sourceforge.net/sourceforge/mad/libmad-0.15.1b.tar.gz

The stardard distribution supports mingw crosscompiling.

 CC=i586-mingw32msvc-gcc ./configure  --host=mingw32

use this SConstruct

<pre>
import glob
env=Environment()
env.Tool('crossmingw', toolpath=['../clam/CLAM/scons/sconstools'])
env.AppendUnique(CPPPATH=[
    ".",
    ])
env.AppendUnique(CPPDEFINES=[
    "HAVE_CONFIG_H",
    "FPM_INTEL",
    "ASO_ZEROCHECK",
    ])
env.AppendUnique(CCFLAGS=[
    "-Wall",
    "-g",
    "-O",
    "-fforce-mem",
    "-fforce-addr",
    "-fthread-jumps",
    "-fcse-follow-jumps",
    "-fcse-skip-blocks",
    "-fexpensive-optimizations",
    "-fregmove",
    "-fschedule-insns2",
    "-fstrength-reduce",
    ])
sources = glob.glob("*.c")
sources.remove("minimad.c")
env.Library("libmad",sources)
</pre>

 scons
 mkdir -p ../libmad/{lib/include}
 cp mad.h ../libmad/include
 cp libmad.lib ../libmad/lib

== ID3Lib ==

I tried those VC binaries and they don't work:

http://kent.dl.sourceforge.net/sourceforge/id3lib/id3lib-3.8.3binaries.zip

So i tried to build from sources.

http://ovh.dl.sourceforge.net/sourceforge/id3lib/id3lib-3.8.3.zip

i had to comment out some lines on the configure.in (line 251)

 C_CHECK_FUNCS(mkstemp)
 #AC_CHECK_FUNCS(
 #  truncate                      \
 #  ,,AC_MSG_ERROR([Missing a vital function for id3lib])
 #)
 
 dnl Checks for typedefs, structures, and compiler characteristics.

And create the following 'SConstruct' file:
 import glob
 
 env=Environment()
 env.Tool('crossmingw', toolpath=['/home/vokimon/mingwtest/mingw/clam/CLAM/scons/sconstools'])
 
 env.AppendUnique(CPPPATH=[
 	".", 
 	"include",
 	"include/id3",
 	"zlib/include",
 	])
 env.AppendUnique(CPPDEFINES=[
 	"HAVE_CONFIG_H",
 	("ID3LIB_LINKOPTION",1),
 	])
 sources = glob.glob("src/*cpp")+glob.glob('zlib/src/*.c')
 env.Library("id3lib",sources)

Adapt Tool path on the previous file to your clam scons location. 
Then:
 autoconf
 CC=i586-mingw32msvc-gcc CXX=i586-mingw32msvc-g++ ./configure
 scons
 mkdir -p ../id3lib/{lib,include}
 cp id3lib.lib ../id3lib/lib/
 cp -r include ../id3lib/   (Maybe we need to move the full directory)

Edit id3lib/include/id3/globals.h line 44
 < #ifdef WIN32
 --
 > #ifdef __MSVC_VER

== libsndfile ==

=== By using precompiled binary on its web ===

'''It doesn't work''' Try with the cross compiling option

http://www.mega-nerd.com/libsndfile/libsndfile-1_0_17.zip

It comes with precompiled binaries:

 mkdir -p ../libsndfile/{lib,include}
 cp libsndfile-1.dll ../libsndfile/lib/libsndfile.dll
 cp sndfile.{h,hh} ../libsndfile/include/

It is missing the lib.

=== By crosscompiling ===

http://www.mega-nerd.com/libsndfile/libsndfile-1.0.17.tar.gz
 
 tar xvfz libsndfile-1.0.17.tar.gz
 cd libsndfile-1.0.17.tar.gz
 CXX=i586-mingw32msvc-g++ RANLIB=i586-mingw32msvc-ranlib AR=i586-mingw32msvc-ar CC=i586-mingw32msvc-gcc ./configure mingw32
 make
 cp src/.libs/libsndfile-1.dll ../dlls
 cp src/.libs/libsndfile-1.dll ../libsndfile/lib/
 cp src/.libs/libsndfile.dll.a ../libsndfile/lib/libsndfile.lib
 cp src/libsndfile.la ../libsndfile/lib/
 cp src/libsndfile.def ../libsndfile/lib/
 cp src/sndfile.h ../libsndfile/include/

== CLAM ==

Apply the patch send to the mailing list.

uncompress the windows-external-libs file

Add the dll path to the ~/.wine/system.reg
Section [System\\CurrentControlSet\\Control\\Session Manager\\Environment], Key PATH
 "PATH"="c:\\windows\\system32;c:\\windows;z:\\home\\vokimon\\CajitasDeArena\\mingw\\dlls"

The "z:\\home\\vokimon\\CajitasDeArena\\mingw" part will vary on your case.

copy to the sandbox the following folders:
* pthreads
* libsndfile
* oggvorbis
* libmad

copy the dlls
 cp windows-external-libs/dlls/{pthreadVCE.dll,ogg.dll,vorbisenc.dll,vorbis.dll} portaudio/lib/portaudio.dll dlls

 scons configure with_fftw3=1 with_fftw=0 audio_backend=portaudio xmlbackend=none prefix=~/CajitasDeArena/mingw/local sandbox_path=~/CajitasDeArena/mingw/


== libogg and libvorbis ==

I didn't managed to crosscompile them my self, but i found some precompiled binaries.

 cd download
 wget http://globulation2.org/dev/glob2_required_libs_mingw.tar.bz2
 mkdir glob
 cd glob/
 tar xvfj ../glob2_required_libs_mingw.tar.bz2
 cd ../..
 mkdir -p oggvorbis/{lib,include,bin}
 cp download/glob/lib/*ogg* oggvorbis/lib/
 cp download/glob/lib/*vorbis* oggvorbis/lib/
 cp -r download/glob/include/ogg/ oggvorbis/include/
 cp -r download/glob/include/vorbis/ oggvorbis/include/
 cp download/glob/bin/*ogg* dlls/
 cp download/glob/bin/*ogg* oggvorbis/bin/
 cp download/glob/bin/*vorbis* oggvorbis/bin/
 cp download/glob/bin/*vorbis* dlls/
