This page hosts screenshots galleries of the ongoing development of CLAM and its applications.

== Network editor port to Qt4 ==

We are working hard on having a first '''Qt4''' port of the Network Editor doing some extra effort on '''usability'''.
Take a look at the [http://iua-share.upf.es/wikis/clam_draft/Network_Editor_Qt4_Port|Port progress page]. 
Here you have some preview screenshots for stage 1 (interface), stage 2 (real network inside) and stage 3 (data visualization and GUI prototyping):

<gallery>

Image:NetEditQt4-EmptyCanvas.png|Common menu options are now available from a handy tool bar.
Image:NetEditQt4-CanvasWhatsThis.png|Are you lost? Use the "What's this" button, Luke.
Image:NetEditQt4-ToolBoxDragNDrop.png|Dragging a processing from the toolbox into the canvas.
Image:NetEditQt4-ProcessingBox.png|Processings in the new version will look something like this.
Image:NetEditQt4-ProcessingWhatsThis.png|Lost again?
Image:NetEditQt4-ExploringConnectors.png|Explore connectors by hovering them.
Image:NetEditQt4-WireTargetTooltip.png|Tooltip and highlight helps you to figure out where are you going to drop the wire.
Image:NetEditQt4-PortAndControlWires.png|Some controls and ports wires.
Image:NetEditQt4-ProcessingsContextActions.png|Context menu for processings allows you to configure or remove them.
Image:NetEditQt4-ConnectorsContextActions.png|Context menu for connectors allows you to disconnect them. You can also copy a widget name to be used in the Prototyper. (see the [[Network Editor tutorial]])
Image:NetEditQt4-CanvasContextActions.png|Context menu for canvas gives another interface to create processings.
Image:NetEditQt4-Transparencies.png|With semitransparencies you can see that something is under that big processing.
Image:NetEditQt4-PdfExport.png|The print option is very useful for generating pdf's for your papers.
Image:NetEditQt4-SMSMess.png|Loading and saving networks is working: SMSMess loaded into the Qt4 interface.
Image:NetEditQt4-SMSMessPortTooltip.png|Taking the port names from the network.
Image:NetEditQt4-XMLError.png|Error instead crash with bad xml format.
Image:NetEditQt4-XMLFactoryError.png|Error instead crash with unsuported processing types on the network file.
Image:NetEditQt4-FactoryError.png|Error instead crash when dropping unsuported processing types from the toolbox.
Image:NetEditQt4-ZoomIn.png|Zoom in.
Image:NetEditQt4-ZoomOut.png|Zoom out.
Image:NetEditQt4-Unconfigured.png|Woops, this processing is not properly configured.
Image:NetEditQt4-UnconfiguredMessage.png|Pass over the processing to see what's the problem.
Image:NetEditQt4-ForbidenDrop.png|Red highlight: You cannot drop the wire here. Types doesn't match: Spectrum -> Audio.
Image:NetEditQt4-AllowedDrop.png|Green highlight: But you can drop it here. Types matches. Audio -> Audio.
Image:NetEditQt4-DummyConfig.png|In dummy mode (no CLAM network, just drawing), configuration allows to choose any number of ports and controls.
Image:NetEditQt4-SubConfigs.png|Real config dialog and some subdialogs for the SMSAnnalysis.
Image:NetEditQt4-ScrollBars.png|Scrollbars appear when the networks goes beyond the viewport.
Image:NetEditQt4-TutorialButton.png|One click access to the online tutorial.
Image:NetEditQt4-EmbededSlider.png|Processing boxes may have a widget embeded on the body. Still some overlap artifacts but they are working even with zoom factors.
Image:NetEditQt4-SpectralNetworkWithControlSenders.png|The Spectral Network example with working control senders.
Image:NetEditQt4-PlayProtection.png|Fixed: System hanged on realtime kernels. Now, hang conditions are detected and gracefully handled.
Image:NetEditQt4-MultiJack.png|JACK is back. Multiple Jack outputs.
Image:NetEditQt4-BackendAlsaStopped.png|Indicators: Alsa backend. Stopped.
Image:NetEditQt4-BackendJackPlaying.png|Indicators: Jack backend. Playing. Jack is choosen when available, else falling back to Alsa.
Image:NetEditQt4-Proto-prototyper.png|First Qt4 based prototyper. Still no plots, but unified binary for Jack and Alsa/DirectX.
Image:NetEditQt4-DefaultPrototyperInterace.png|No interface? Prototyper will provide you a default one.
Image:NetEditQt4-DummyIndicator.png|The 'dummy' mode indicator.
Image:NetEditQt4-PrototyperIndicators.png|Defining labels as indicators for a prototyper interface (already added to the default interface)
Image:NetEditQt4-PrototyperQJackCtl.png|Prototyper playing with qjackctl
Image:NetEditQt4-PortMonitor-ProofOfConcept.png|A very simple vumeter. Just a PortMonitor proof of concept
Image:NetEditQt4-PortMonitor-Oscilloscope.png|An oscilloscope.
Image:NetEditQt4-PortMonitor-OscilloscopeSpectrumVumeter.png|Oscilloscope, spectrums and vumeters, all working.
Image:NetEditQt4-PortMonitor-SpectralPeaks.png|A monitor for spectral peaks is also working.
Image:NetEditQt4-PortMonitor-DummyChordViews.png|Chord views from the Annotator nicely embeded on processing boxes. Still using dummy data.
Image:NetEditQt4-PortMonitor-RandomGenerated.png|This time the data is being read from the port. Still random but now other processing generates it.
Image:NetEditQt4-PortMonitor-RealTimeChords.png|At last, real time chord extraction with Tonnetz and KeySpace.
Image:NetEditQt4-Designer-Oscillator.png|Oscilloscope as Qt Designer plugin. It shows dummy data.
Image:NetEditQt4-Prototyper-OscillatorDummy.png|Oscilloscope loaded by the prototyper. Still no connection.
Image:NetEditQt4-Prototyper-Oscillator.png|Oscilloscope run-time connected to the underlying network!
Image:NetEditQt4-LedVumeter.png|Nicer vumeter with leds.
Image:NetEditQt4-Prototyper-Tonnetz.png|Tonnetz on the prototyper. Oscilloscope line color was changed as a Designer property.
Image:NetEditQt4-Prototyper-KeySpace.png|KeySpace on the Prototyper.
Image:NetEditQt4-Prototyper-EditedColors.png|After some color editions (just on the designer).
Image:NetEditQt4-Prototyper-TonalWithIndicators.png|Adding the playback/backend indicators.
</gallery>
