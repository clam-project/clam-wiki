CLAM's visual builder is known as the NetworkEditor.
It is a patching tool to graphically connect processing units in a ''network''
that you can use as the processing core of you application.
CLAM also provides Qt Designer integration,
so you can also build graphical interfaces that nicely interact with such processing core.
You can even combine both, Qt Designer and CLAM NetworkEditor,
to fully build standalone applications and plugins without writting any code at all.

In the present tutorial we will learn the main features of the NetworkEditor step by step.

== Setup ==

* Linux: the recommended audio backend is JACK. It is automatically selected if the JACK server is running. Use qjackctl to start it and use the 'Connect' tool to connect inputs and outputs as desired.
* Windows: we recommend the PortAudio backend which is selected by default. You should select with the Windows Multimedia Mixer the input to fed to the NetworkEditor: 'microphone' or 'mixed stereo' when you want to process the audio output of other program such a multimedia player. '''To prevent annoying feedback noise, do not use the 'mixed stereo' when the network has also output.'''

== First steps ==

* Execute the Network Editor program. The program should look like this:

[[Image:NetTutorial-Initial.png|500px|center]]

* Not very exciting, right? But now go to ''File->Open example''. There you will find a number of examples.
* Chose the <tt>spectralNetwork.clamnetwork</tt> example.
* Resize the window and use the zoom buttons [[Image:NetTutorial-ZoomOut.png]] or the mouse wheel to make the network fit:

[[Image:NetTutorial-SpectralTransformation.png|500px|center]]

* You can feed the output of a multimedia player, press the play button [[Image:Icon-Play.png]] and move with the sliders to obtain some cool effects.

[[Image:NetTutorial-SpectralTransformationPlaying.png|500px|center]]

* Some basic concepts are needed to understand what's happening here. So, now, let's build a network from scratch.

== Creating the simplest Network ==

* Select File->New. You will get a blank canvas again.
* Now we are going to add a number of Processings. A Processing object is the basic building block in CLAM. Processings are listed on the left hand menu in the NetworkEditor, grouped by categories. Click on the Audio File I/O Category in order to expand the view and see what Processings are available.


[[Image:Tutorial-AudioFileProcessingTree.png|200px|center]]


* Click on the MonoAudioFileReader and drag it to the canvas on the right side. It should now look like this:


[[Image:MonoAudioFileReader.png|500px|center]]


* The Processing is "red" because it is not "configured" properly. If any Processing in the network is not properly configured, the network cannot be started. Let's fix that. Pass over the processing with the mouse and a tooltip will show the configuration error message. In this case, we did not selected a file to read.

[[Image:NetTutorial-ErrorTooltip.png|200px|center]]

* Processing configuration is accessible from the popup menu that appears when you right-click the processing.

[[Image:NetTutorial-ProcessingPopupMenu.png|300px|center]]

* Choose 'Configure' and it will open a configuration dialog.

[[Image:NetTutorial-AudioFileConfig.png|500px|center]]


* Click on the "..." button and select an audio file from your hard drive.
* Assure you have the 'Loop' option also selected.
* After clicking ok on the configurator, the Processing should be in Green now.

[[Image:NetTutorial-MonoAudioFileReaderConfigured.png|500px|center]]


* Now you can run this network by simply selecting Network->Play. All you can see is that the Playback status down on the right says ''Playing'' but no sound is produced. That is because we have still not added an audio output!
* Go to the ''Audio Input/Output'' category and drag an AudioSink processing object.
* To connect both processings just drag a wire from one round connector (port) to the other.

[[Image:NetTutorial-ConnectedProcessings.png|500px|center]]

* Port connection is not allways feasible. Ports communicate data of several types of data. You can not connect ports which do not share its data type. While dragging a wire, ports that are not compatible are highlighted in red instead of green.

[[Image:NetEditQt4-ForbidenDrop.png|200px|center]]
[[Image:NetEditQt4-AllowedDrop.png|200px|center]]

* To disconnect a port, use the context menu for the connector (right click the port).

[[Image:NetTutorial-PortPopupMenu.png|500px|center]]


* Reconnect the ports and play the network. You will hear the sound file you selected.

== Visualising data ==

* Another interesting thing we can add to our network is a visualisation of the audio that is being played. For that purpose we will use the Oscilloscope in the 'Graphiclal Monitors' category. Graphical monitors are an special kind of processing that displays incoming data.
* Data is displayed in the box. As it is too small you need to resize it by dragging the lower right yellow corner. You can also move the processing by dragging the name caption.
* Connect the input Port of the Oscilloscope to the output Port of the MonoAudioFileReader. Start the Network, you should be able to see the audio being read:

[[Image:NetTutorial-AudioMonitor.png|500px|center]]

* Right now we only can use audio monitors. Later on we'll see other types of data that can be also viewed.

== Saving and loading ==

* We have put too much work into this network just to risk loosing it now! We should save it somehow. Select File->Save and choose the location and name you want. Don't forget the '.clamnetwork' extension.
*If you are wondering what the file looks like go ahead and open it with your favourite text editor. Note that it is a regular xml file that is easy to edit and export and should look something like this:

[[Image:NetworkConfig.png|500px|center]]

This file specifies all the Processings, connections and configurations. Note that the graphical positions of the elements are stored in a separate .pos file.

*If you feel adventurous you can go ahead and edit some of the values and then load the xml from the NetworkEditor.

== We are still updating this tutorial to the 0.4.0 version ==

'''The rest of this tutorial still refers to the 0.3.X versions of the Network Editor. It is expected to be updated in short to the 0.4.X series. Although the interface has changes, you could still follow it as concepts are the same.'''


==The Spectral Domain==

*In order to do more interesting things we will now turn into the spectral domain. Delete the connection between the MonoAudioFileReader and the AudioSink. Select a SpectralAnalysis from the Analysis category and a SpectralSynthesis from the Synthesis category. Connect them as shown:


[[Image:SpectralAnalysisSynthesis.png|500px|center]]


*If you start the network right away chances are that you will get nothing out of it. As a matter of fact, we need another processing first, it is called OverlapAdd and it is used for smoothing out the resulting audio frames. Take it from the Synthesis category and connect it as shown.


[[Image:NetTutorial-SpectralAnalysisSynthesisComplete.png|500px|center]]


* Now you need to configure the Processings appropiately. We won't go into the DSP details but you are more than welcome to try with different values (be careful to save the network every step you take because in its current version, a wrong setting will produce a program abortion).
Here you have a screenshot of the three configurations (SpectralAnalysis, SpectralSynthesis and OverlapAdd).


[[Image:SpectralAnalysisConfig.png|200px|center]]


[[Image:SpectralSynthesisConfig.png|200px|center]]


[[Image:OLAConfig.png|200px|center]]


* In order to finish this section we are going to add a couple of monitors that can give us more useful information. We will add an SpectrumView to the output of the SpectralAnalysis and move the Oscilloscope to the output of the OverlapAdd, just as shown:


[[Image:NetTutorial-SpectralView.png|500px|center]]

==Transformations and Controls==

*Now that we know how to get exactly the same audio that we had at the beginning, how about playing around a bit with it? You can in fact select any transformation from the SpectralTransformations category, but in order to start small, we will use the SampleAndHold. Connect it as shown:


[[Image:SampleAndHold.png|500px|center]]


*If you start the Network you will see its very clear effect! But, how can I control the way it behaves? Did you notice a red triangle on the top of the Processing? That is what in CLAM is called a "Control". Controls are used in order to receive and send asynchronous events (such as those coming from a slider,etc...). So all we need to do is to learn how to send values to this input control. Go to the Utils category and select and OutControlSender.

*Once in the canvas right click to bring up its configuration and set it up as shown below:


[[Image:SampleHoldControlConfig.png|200px|center]]


*Now connect the slider to the input control in the SampleAndHold and resize the control as needed. It should look like:


[[Image:ConnectingControl.png|500px|center]]


*Now you are ready to start the network and play around with the slider in order to affect the way the effect behaves.

*Finally it is up to you to try out the different Spectral Transformations and see what they are capable of doing. Not that you can even chain different transformations one after the other as shown here (this network is available if you open the spectralNetwork.xml file in your example-data folder):


[[Image:SerialSpectralTransformations.png|500px|center]]


==SMS Transformations==

*Appart from the regular STFFT (Phase Vocoder) implementation, CLAM also has implemented the Sinusoidal plus Residual Model (a.k.a. SMS). Even more interesting transformations can be implemented with that model. Now that you have a working knowledge of the NetworkEditor the best you can do is to start off with an example. Open the freqshift-gains-plots.xml file (in windows this file should be in your working directory and in Linux you should point your browser to /usr/share/networkeditor/example-data) network and experiment with it, changing the SMS Transformations for others in the same category.


[[Image:SMSFreqShiftGainsPlots.png|500px|center]]


== Building Interfaces with the Prototyper ==


The Prototyper is a utility that allows wrap a network you built
with the NetworkEditor on an interface as a stand alone application.
'''No compilation, and no programming is involved.'''
Interfaces can be designed with a nice tool, the Designer, 
which comes with the QT library by Trolltech,
With the Designer you can lay out the graphical elements (widgets)
including some widgets that CLAM provides to visualize sound related data.

To see its potential let's start opening with a example network named SMSmess.xml.

[[Image:Prototyper-DesigningTheNetwork.png|500px|center]]


What it does is mainly an SMS transfomation called PitchShift which shifts the Sinusoidal
component of the sound and keeps the Residual component. 
Independent gains are applied to both components.

There is also a prepared interface for this example network. 
It is named SMSmess.ui and it is placed on the examples folder.
Open it with the Qt Designer.


[[Image:Prototyper-Designer.png|500px|center|Qt Designer opening the example interface]]

Notice that there is a '''CLAM Plots''' tab on the widget toolbox on the left.
If you don't see that tab or if you don't se the black squares on the dialog, 
you are having problems with the CLAM qt plugins.
The CLAM Plots toolbox contains widgets that display CLAM objects such as
audio, spectrums, spectral peaks...


In order the Prototyper utility to know which widgets must to be connected to the network
you must name the widgets like the examples above:

For the port monitors <tt>OutPort__<em>ProcessingName</em>__<em>PortName</em></tt>.
Be carefull, elements are separated with <b>double</b> underlines here!


[[Image:Prototyper-BindingPortMonitor.png|500px|center|Binding a port monitor to an output port]]

Similar names goes to knobs and sliders: <tt>InControl__<em>ProcessingName</em>__<em>ControlName</em></tt>

[[Image:Prototyper-BindingInputControl.png|500px|center|Binding a slider to an input control in the network]]

You should name a button <tt>PlayButton</tt> 
and you may name other button <tt>StopButton</tt>.
The prototyper will use them to control the network playback.

Once you are done with the interface you can save it with the same base name 
and in the same location than the network editor.
Of course, this is the case of the example.
Then, you can drag the SMSmess.xml file to the prototyper icon 
and you will see the application working:

[[Image:Prototyper-Running.png|500px|center|Running the application]]
