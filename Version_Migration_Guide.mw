This manual chapter gives hints on how to migrate existing code from one version of CLAM to another hihglighting code level incompatibilities and new ways of doing things.

== 1.1 to 1.2 ==

* Processing::GetExecState() has been removed. Use Processing::IsRunning() and Processing::IsConfigured() which lead to more readable code.
* {Mono|MultiChannel}AudioFileReader::GetAudioFile() method has been removed. If you want to access the header or the text descriptors just use the {Mono|MultiChannel}AudioFileReader::GetHeader() and {Mono|MultiChannel}AudioFileReader::GetTextDescriptors() 

== 1.0 to 1.1 ==

=== vmqt and vmfl ===

clam_vmqt and clam_vmfl were dropped. Annotator/vmqt, based on qt4, contains a set of classes that should provide the same functionality than clam_vmqt but it is not API compatible.

=== AudioFile ===

Multi/Mono AudioFile Reader/Writer have changed their configuration. The SourceFile attribute is now a AudioIn/OutFilename instead a AudioFileTarget/Source. For example where your code was:

 CLAM::AudioFile file;
 file.OpenExisting("audio.wav");
 if (file.IsReadable())
 {
 	// Manage error
 }
 CLAM::MonoAudioFileReaderConfig config;
 config.SetSourceFile(file);
 CLAM::MonoAudioFileReader reader(config);

Now it will be:

 CLAM::MonoAudioFileReaderConfig config;
 config.SetSourceFile("audio.wav");
 CLAM::MonoAudioFileReader reader(config);
 if (reader.GetExecState()==Unconfigured)
 {
 	std::cerr << reader.GetErrorConfigMessage() << std::endl;
 	// Manage error
 }

If your code used the CLAM::AudioFile object further, you can still get it from the processing using the GetAudioFile() method.

Concerning writers, now format parameters, formerly at AudioFile object, are mostly available directly as configuration object attributes. Such attributes are set by default so you can forget about them in most cases. By default,

== 0.98.0 to 0.99.0 ==

The processing state 'Disabled' has been removed.
Now a processing can be either Running, Ready or Unconfigured.

If you used any subclass of FFT_base and IFFT_base, you should consider moving to 'FFT' and 'IFFT' which renders to the better implementation available according to the with_X configure options. That's, by preference fftw3 (disabled by default until the next release), fftw2 and ooura.

== 0.95.0 to 0.96.0 ==

OutControl::AddLink and OutControl::RemoveLink receive references instead of pointer as parameter.

== 0.91.0 to 0.95.0 ==

The classes <tt>MonoAudioFileReader</tt> and <tt>MultiChannelFileReader</tt> take at the configuration an <tt>AudioFileSource</tt> instead of an <tt>AudioFile</tt>.
Also <tt>MonoAudioFileWriter</tt> and <tt>MultiChannelFileWriter</tt> take <tt> AudioFileTarget</tt>. This has been changed for the automatically generated interface to treat them differently.
