This page compiles a set of good (and mental sanity) practices for Qt code in CLAM.
You can find a lot of code in CLAM that doesn't follow those guidelines.
That's because we learned those guidelines by feeling in our forehead what happens if you don't follow them. 
Help us to remove rogue code and not adding more. ;-)

== Method (and signals and slots) naming conventions ==

CLAM uses FirstLetterUpperCase names for methods
(although there is a underground trend to change that ;-) )
but when dealing with widgets and qt code adhere to the qt naming conventions
for methods and use firstLetterLowerCase.

Avoid the tendency shown in Annotator/vmqt that rewrittes an uppercase
'Show' that calls a lower case qt 'show' method.

In general the conventions for slots and signals are:
* Signals: <tt>somethingHappened()</tt>   (using past)
* Slots: <tt>doThatThink</tt>   (imperative, just like a regular method)
so that when you connect you can read:
''When emmiter somethingHappened receiver doThatThing''

Reserve the onSomethingHappened method names for [http://doc.trolltech.com/4.4/designer-using-a-component.html#automatic-connections|ui implicitly connected slots] 
which follow qt naming conventions: <tt>on_uiObjectName_signalName()</tt>
Defining such a method saves you writting that connection code:

 connect(_ui->uiActionName, SIGNAL(triggered()), this, SLOT(doThat()))

== Deciding whether to use signals slots or not ==

The signal/slot mechanism is powerful but can turn you code a jungle.
'''Don't over use it.'''
* has less compile time checks, 
* '''makes execution harder to trace''',
* adds signal resolution overhead. 

I highlighted the second reason.

When to add a signal? 
When the widget you are programming is generating events that
will be catched by '''widgets that the emiting widget don't know'''.

A clear bad smell for this is the case of programming a widget and having:
 connect(this, signal, knownWidget, slot)

and some other method doing:
 emit signal()

The emision should become simply:
 knownWidget->slot()

and the connection removed.
If 'knownWidget' is 'this', well, there is something ill in your mind...

Also, by the 'avoid sigslot' principle, 
this also means that you should want to know the widgets that 
would receive a signal in order to call a method instead.
So '''keep pointers to receiver widgets instead of setting connections'''.

== When to use designer and when to use code? ==

Use the designer for '''main window''' but just to include
'''actions, menus, toolbars and images'''.
'''Avoid inserting widgets''' or controling the layout.
Previous developments using the ui as base for the layout of the widgets in main window has rendered in a hardly mantainable code.

In the case of dialogs, use the designer freely as long as
the dialog content is not dynamic.

== Icons ==

* In a given application, place the icons in src/images/
* Include them in a src/images.qrc file in the :/icons/ path
* SVG format is preferred over PNG, mostly with non stock icons.
* For stock icons use the crystalsvg theme
* Write down the path of copied stock icons in src/images/origin.txt so that they could be updated as a whole when we change/update the theme.
