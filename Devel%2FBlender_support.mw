This article explains the Blender integration on CLAM. You could find the needed Blender python scripts [http://iua-share.upf.edu/svn/clam/trunk/CLAM/plugins/spacialization/blender/ on the 'spacialization' plugin directory of the SVN].

The following scripts uses the blender objects included in the 'AudioSources' and 'AudioSinks' groups as general convention.

== Defining the Blender scene ==
=== Adapting a previous Blender scene ===
If you have an existing Blender scene, just create the 'AudioSources' and 'AudioSinks' groups and add the objects you want to use in them.
=== Creating a new Blender scene ===
If you want to start a new scene, you could import the scene_maker script and run it once. Or directly, call blender with -P from the "CLAM/plugins/spacialization/blender" path:
 blender -P scene_maker.py
It would ask how many sources and sinks you want to use:

[[Image:Blender scene maker1.png]]

and generate UVspheres as generic models, included on the specific groups:

[[Image:Blender scene maker2.png]]

[[Image:Blender scene maker graphic.png]]

== Sending positions through OSC ==
The 'BlenderOSCSender.py' script allows to send the source and sinks positions through OSC (using the OSC plugin implementation 'CLAM/plugins/osc/oscpython/OSC.py') on scene FrameChanged events, or link to object ObjectUpdate ones.
=== Configuring the sender ===
You could import the BlenderOSCSender.py in your list of Text blender buffers and assign on the selected event.
=== Exporting the scene to CLAM network receivers ===
To generate a CLAM network OSC monitor for that scene, you could call the 'network_scene_exporter.py' script, which is automatically called by the scene_maker. It ask for a network filename:

[[Image:Blender scene maker filedialog network.png]]

== Exporting a choreographic sequencer file ==

----
''Previous article text:''

At the moment you could access the Blender scene using OSC. Further integration is coming up. Some formats need to be defined (see [http://technocalifornia.blogspot.com/2008/06/standards-for-3d-scene-description.html Xavier post] for more info).

== How-to using OSC ==
Let's see how to send OSC from blender scene and receive it on CLAM.

=== Blender ===
Sending OSC messages using [https://iua-share.upf.edu/svn/clam/trunk/CLAM/plugins/osc/oscpython/OSC.py OSC.py] (OSC client module for python by stefan kersten, you have to put a copy on your home/src/liblo). You could link this script to any object. It checks for ObjectUpdate events of objects which are on GroupAudio group. The sending path is '/[http://www.jamoma.org/wiki/SpatDIFSpatialSoundDescriptionInterchangeFormat SpatDIF]/type/number/xyz', where 'type' is the type of audio object ('source' if the object exists on 'GroupSources', 'sink' if exists on 'GroupSinks') and number is the relative number within the correspondent type group.

=== CLAM ===
CLAM implements OSC as a plugin. You could compile just runing 'scons' on [https://iua-share.upf.edu/svn/clam/trunk/CLAM/plugins/osc/ trunk/CLAM/plugins/osc]. For now that compiles the LibloSource processing, which is a simple OSC server. You need to configure the port and the path:
[[Image:LibloSource_OSC_Setup.png]].
