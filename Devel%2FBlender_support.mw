This article explains the Blender integration on CLAM. You could find the needed Blender python scripts [http://iua-share.upf.edu/svn/clam/trunk/CLAM/plugins/spacialization/blender/ on the 'spacialization' plugin directory of the SVN].

The following scripts uses the blender objects included in the 'AudioSources' and 'AudioSinks' groups as general convention.

== Defining the Blender scene ==
=== Adapting a previous Blender scene ===
If you have an existing Blender scene, just create the 'AudioSources' and 'AudioSinks' groups and add the objects you want to use in them. Then import the script that you want to use from the following ones:

=== Creating a new Blender scene ===
If you want to start a new scene, you could import the scene_maker script and run it once. Or directly, call blender with -P from the "CLAM/plugins/spacialization/blender" path:
 blender -P scene_maker.py
It would ask how many sources and sinks you want to generate:

[[Image:Blender scene maker1.png]]

and generate UVspheres as generic models, included on the specific groups:

[[Image:Blender scene maker2.png]]

[[Image:Blender scene maker graphic.png]]

== Sending positions through OSC ==

The 'BlenderOSCSender.py' script allows to send OSC messages the source and sinks positions through OSC (using '[https://iua-share.upf.edu/svn/clam/trunk/CLAM/plugins/osc/oscpython/OSC.py OSC.py]' -OSC client module for python by Stefan Kersten, you have to put a copy on your home/src/liblo or blender/../../osc/oscpython-).
The script could be linked to any source or sink object, on FrameChanged events or object ObjectUpdate ones. The sending OSC path is '/[http://www.jamoma.org/wiki/SpatDIFSpatialSoundDescriptionInterchangeFormat SpatDIF]/type/number/xyz', where 'type' is the type of audio object ('source' if the object exists on 'GroupSources', 'sink' if exists on 'GroupSinks') and number is the relative number within the correspondent type group. By now, the port is fixed to 7000.

=== Configuring the sender ===
You could import the BlenderOSCSender.py in your list of Text blender buffers and assign on the desired event (FrameChanged or ObjectUpdate on a sink or a source).

=== Exporting the scene to CLAM network receivers ===
First at all, you will need to compile and install the OSC CLAM plugin, as MultiLibloSources are used to receive the OSC messages.
To generate a CLAM network OSC monitor for that scene, you could call the 'network_scene_exporter.py' script, which is automatically called by the scene_maker, and applied to a FrameChanged scene event. It will ask for a network filename:

[[Image:Blender scene maker filedialog network.png]]

And you will obtain a Network like this:

[[Image:Clam osc receivers for blender scene.png]]

To make it work, just run your Blender animation (alt-a), and the monitors would be updated to the objects positions, and if is called by a FrameChanged event the CLAM Network would be also show the actual frame number.

== Exporting a choreographic sequencer file ==
The blender choreographic sequencer file exporter is included on the 'choreofile_exporter.py' script, and generates the choreographic sequencer file for one sink and one source selected objects, and a sequencer monitor network (using network_scene_exporter).

First you will need to select '''just one''' sink '''and one''' source object, and run the script ("alt-p" on the Text Editor using choreofile_exporter). 

The script will ask for a sequencer file name:

[[Image:Blender exporting choreoSequencer file.png]]

A Network with the same base name of the choreographic file will be created, with a choreo sequencer processing configured to read the created sequencer file at the proper controls per second (using blender animation frames per second):

[[Image:Blender generated network ChoreoSequencer.png]]

[[Image:ChoreoSequencerConfig BlenderScene.png]]

== How-to using OSC ==
Let's see how to send OSC from blender scene and receive it on CLAM.

=== Blender ===
Sending OSC messages using [https://iua-share.upf.edu/svn/clam/trunk/CLAM/plugins/osc/oscpython/OSC.py OSC.py] (OSC client module for python by stefan kersten, you have to put a copy on your home/src/liblo). You could link this script to any object. It checks for ObjectUpdate events of objects which are on GroupAudio group. The sending path is '/[http://www.jamoma.org/wiki/SpatDIFSpatialSoundDescriptionInterchangeFormat SpatDIF]/type/number/xyz', where 'type' is the type of audio object ('source' if the object exists on 'GroupSources', 'sink' if exists on 'GroupSinks') and number is the relative number within the correspondent type group.

=== CLAM ===
CLAM implements OSC as a plugin. You could compile just runing 'scons' on [https://iua-share.upf.edu/svn/clam/trunk/CLAM/plugins/osc/ trunk/CLAM/plugins/osc]. For now that compiles the LibloSource processing, which is a simple OSC server. You need to configure the port and the path:
[[Image:LibloSource_OSC_Setup.png]].
