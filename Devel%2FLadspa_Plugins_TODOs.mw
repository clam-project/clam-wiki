== ToDo ==

=== High priority ===

* Change static metadata classes to Registrator char* constructor for the spacialization plugin
* The same for (some) clam processings (not plugins)
* NE/ProcessingTree use some category attribute to construct the tree
* ''''Milestone: get rid of the char* processingClasses[] hardcoded tree.'''
* use some attribute to distinguish LADSPA and CLAM (and...) => so processing tree does not know about ladspa
* Factory refactoring: unify two registry maps (creator and metadata)
* Refactor RuntimeLibraryLoader to separate Ladspa and clam plugins. Use hollywood (template method) pattern.
* Add plugin functionality (ladspa, clam) to OfflinePlayer. Or any NetworkPlayer class actually.
** compile agains RunTime(Ladsap)Loader.cxx
* Mac Ladspas
* Windows Ladspas (crosscompiled with mingw)

Not so high prio
* load lv2 plugins
* load lv2 midi plugins

=== Medium priority ===
* (med) open ladspa libs bug
* "extensible processings" refactoring: change NetworkEditor processing loading logic
** 1. put all info about processings in the factory
** 2. build QTree from factory data.
** 3. query list of processings of a given category to the factory.
** add new columns to the associative data-structure: category, description.

=== Low priority ===


=== high level ToDo's to discuss ===
* save controls state with network

== Done ==

* (high) add examples to example-data

*  Registrator constructor with a static array of char* for metadata
* Registrator refactoring: pull up Registrator to base Factory class
* Unify RunTimeLibraryLoader and LadspaExplorer
* Factory:
** refactoring: clam creators being objects not functions
** unify clam and ladspa factory
* ('''not needed''') make LadspaFactory.hxx non-coupled with ladspa headers. so uses of LFactory don't need #ifdef USE_LADSPA. use Pimpl C++ idiom in LFactory.
* (must change interaction?) automatic in-control sliders in networkeditor
* (med) more verbose keys for LadspaFactory. at least including "ladspa"
* use the real value (get rid of the fixed-value hack)
* clamp values outside the range
* (med) load plugins from LADSPA_PATH plus standard paths
* (med) check for non-valid directory
* update LadspaFactoryTest with "real" classes
* don't use a Config in LWrapper. Use NullConfig instead.
* (med) Network: catch FactoryError
* load plugins from .so
* look out OM for Plugin and PluginLibrary
* check for empty LADSPA_PATH
* wrapper a plugin
* early support for libraries (through map and list)
* complementary data in the QTreeWidgetItem
* ID for ladspa tokenized with '|'
** could be useful to include the UID that provides Ladspa (instead of the full plugin name)
* first steps to instantiate using NetworkCanvas::addProcessing
* created LadspaPluginsExplorer (structure to hold Ladspa information)
* pass LadspaFactoryTest
* created LadspaFactory
* DummyLadspa to LadspaWrapper
* created LadspaWrapperCreator
* (med) comment out non-necessary functions
* (med) refactor: extract ladspa specific to new files
* (med) wrapper any plugin in the three

== Dropped ==
* (med) extract implementation in file LadspaFactory.cxx
* (low) add Ladspa tree and order it by cat
** (low) check for # of plugins to make a branch in the tree
