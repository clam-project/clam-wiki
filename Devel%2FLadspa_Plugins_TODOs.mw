== TODO ==

* (high) use the real value (get rid of the fixed-value hack)
* (high) clamp values outside the range
* (high) add examples to example-data
----
* (med) more verbose keys for LadspaFactory. at least including "ladspa"
* '''Done'''  (med) load plugins from LADSPA_PATH plus standard paths
* '''Dropped''' (low) add Ladspa tree and order it by cat
** '''Dropped''' (low) check for # of plugins to make a branch in the tree
* '''Done''' (med) check for non-valid directory
* open ladspa libs bug
* (med) extract implementation in file LadspaFactory.cxx
* (med) '''new''' make LadspaFactory.hxx non-coupled with ladspa headers. so uses of LFactory don't need #ifdef USE_LADSPA. use Pimpl C++ idiom in LFactory.
* (med) update LadspaFactoryTest with "real" classes
* (med) don't use a Config in LWrapper. Use NullConfig instead.
* "extensible processings" refactoring: change NetworkEditor processing loading logic
** 1. put all info about processings in the factory
** 2. build QTree from factory data.
** 3. query list of processings of a given category to the factory.
* Factory:
** refactoring: clam creators being objects not functions
** unify clam and ladspa factory
** add new columns to the associative data-structure: category, description.


=== high level TODOs to discuss ===

* save controls state with network
* automatic in-control sliders in networkeditor

== DONE ==
* (med) Network: catch FactoryError
* load plugins from .so
* look out OM for Plugin and PluginLibrary
* check for empty LADSPA_PATH
* wrapper a plugin
* early support for libraries (through map and list)
* complementary data in the QTreeWidgetItem
* ID for ladspa tokenized with '|'
** could be useful to include the UID that provides Ladspa (instead of the full plugin name)
* first steps to instantiate using NetworkCanvas::addProcessing
* created LadspaPluginsExplorer (structure to hold Ladspa information)
* pass LadspaFactoryTest
* created LadspaFactory
* DummyLadspa to LadspaWrapper
* created LadspaWrapperCreator
* (med) comment out non-necessary functions
* (med) refactor: extract ladspa specific to new files
* (med) wrapper any plugin in the three
