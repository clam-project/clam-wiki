[http://www.ladspa.org/ LADSPA] is the Linux Audio Developer Simple Plugin API. It enable audio effects to be reused across several host applications such Ardour, Audacity, Sweep, Amarok...
CLAM can be also LADSPA host but this page just explains how to build a LADSPA plugin using CLAM.

== Common SConstruct ==

All the examples here can be built by using the same template of SConstruct file that is presented in [[Building a processing library]] section just changing the line:

 install = env.Install(os.path.join(CLAMInstallDir,'lib','clam'), libraries)

by:

 install = env.Install(os.path.join(CLAMInstallDir,'lib','ladspa'), libraries)


== Exporting a processing ==

If you want to export a given processing (CLAM::AudioAmplifier in the example) as a LADSPA plugin, the following code will do the trick. This will map:
* CLAM input and output ports in the processing as LADSPA audio ports, and
* CLAM input and output controls in the processing as LADSPA control ports.

 #include <CLAM/AudioAmplifier.hxx>
 #include <CLAM/LadspaProcessingExporter.hxx>
 #include <CLAM/LadspaLibrary.hxx> 
 
 static CLAM::LadspaLibrary library;
 extern "C" const LADSPA_Descriptor * ladspa_descriptor(unsigned long index)
 {
 	static CLAM::LadspaProcessingExporter<CLAM::AudioAmplifier> a3(library, 3002,
 			"CLAM Team <clam@iua.upf.edu>", "GPL");
  	return library.pluginAt(index);
 }

The extra parameters are the numeric id, the maker and the copyright.
Label is built by prepending 'CLAM_' to the processing class name and the descriptive name is built by prepending 'CLAM '.

== Exporting a CLAM network ==

TODO: explain this

 #include <CLAM/LadspaNetworkExporter.hxx>
 #include <CLAM/LadspaLibrary.hxx> 
 
 static CLAM::LadspaLibrary library;
 CLAM_EXTERNAL_FILE_DATA(wire,"wire.clamnetwork")
 extern "C" const LADSPA_Descriptor * ladspa_descriptor(unsigned long index)
 {
 	static CLAM::LadspaNetworkExporter n2(library, wire, 3004,
 			"clamWire0", "CLAM Wire",
 			"CLAM Team <clam@iua.upf.edu>", "GPL");
 	return library.pluginAt(index);
 }



== Building more than one plugin in a single library ==

Just add more than one LadspaProcessingExporter or LadspaNetworkExporter like in the following example:

 #include <CLAM/AudioMultiplier.hxx>
 #include <CLAM/AudioAmplifier.hxx>
 #include <CLAM/Oscillator.hxx>
 #include <CLAM/LadspaNetworkExporter.hxx>
 #include <CLAM/LadspaProcessingExporter.hxx>
 #include <CLAM/LadspaLibrary.hxx> 
 
 static CLAM::LadspaLibrary library;
 
 CLAM_EXTERNAL_FILE_DATA(genderChange,"genderChange.clamnetwork")
 CLAM_EXTERNAL_FILE_DATA(wire,"wire.clamnetwork")
 
 extern "C" const LADSPA_Descriptor * ladspa_descriptor(unsigned long index)
 {
 	static CLAM::LadspaProcessingExporter<CLAM::Oscillator> a1(library, 3000,
 			"CLAM Team <clam@iua.upf.edu>", "GPL");
 	static CLAM::LadspaProcessingExporter<CLAM::AudioMultiplier> a2(library, 3001,
 			"CLAM Team <clam@iua.upf.edu>", "GPL");
 	static CLAM::LadspaProcessingExporter<CLAM::AudioAmplifier> a3(library, 3002,
 			"CLAM Team <clam@iua.upf.edu>", "GPL");
 	static CLAM::LadspaNetworkExporter n1(library, genderChange, 3003,
 			"clamGenderChange0", "CLAM Gender Change",
 			"CLAM Team <clam@iua.upf.edu>", "GPL");
 	static CLAM::LadspaNetworkExporter n2(library, wire, 3004,
 			"clamWire0", "CLAM Wire",
 			"CLAM Team <clam@iua.upf.edu>", "GPL");
 	return library.pluginAt(index);
 }

== Exporting a network ==

== Multiple plugins in a single dll ==

== Using NetworkEditor to generate LADSPA ==
